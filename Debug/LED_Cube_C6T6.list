
LED_Cube_C6T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080047e8  080047e8  000147e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004958  08004958  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004958  08004958  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004958  08004958  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004958  08004958  00014958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800495c  0800495c  0001495c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000070  080049d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  080049d0  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b537  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf7  00000000  00000000  0002b5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  0002d2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  0002df40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186fc  00000000  00000000  0002ead0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee30  00000000  00000000  000471cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089826  00000000  00000000  00055ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df822  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004064  00000000  00000000  000df874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000e38d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000e38fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080047d0 	.word	0x080047d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080047d0 	.word	0x080047d0

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__gedf2>:
 80004c4:	f04f 3cff 	mov.w	ip, #4294967295
 80004c8:	e006      	b.n	80004d8 <__cmpdf2+0x4>
 80004ca:	bf00      	nop

080004cc <__ledf2>:
 80004cc:	f04f 0c01 	mov.w	ip, #1
 80004d0:	e002      	b.n	80004d8 <__cmpdf2+0x4>
 80004d2:	bf00      	nop

080004d4 <__cmpdf2>:
 80004d4:	f04f 0c01 	mov.w	ip, #1
 80004d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004e8:	bf18      	it	ne
 80004ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004ee:	d01b      	beq.n	8000528 <__cmpdf2+0x54>
 80004f0:	b001      	add	sp, #4
 80004f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004f6:	bf0c      	ite	eq
 80004f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80004fc:	ea91 0f03 	teqne	r1, r3
 8000500:	bf02      	ittt	eq
 8000502:	ea90 0f02 	teqeq	r0, r2
 8000506:	2000      	moveq	r0, #0
 8000508:	4770      	bxeq	lr
 800050a:	f110 0f00 	cmn.w	r0, #0
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf58      	it	pl
 8000514:	4299      	cmppl	r1, r3
 8000516:	bf08      	it	eq
 8000518:	4290      	cmpeq	r0, r2
 800051a:	bf2c      	ite	cs
 800051c:	17d8      	asrcs	r0, r3, #31
 800051e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000522:	f040 0001 	orr.w	r0, r0, #1
 8000526:	4770      	bx	lr
 8000528:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800052c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000530:	d102      	bne.n	8000538 <__cmpdf2+0x64>
 8000532:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000536:	d107      	bne.n	8000548 <__cmpdf2+0x74>
 8000538:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800053c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000540:	d1d6      	bne.n	80004f0 <__cmpdf2+0x1c>
 8000542:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000546:	d0d3      	beq.n	80004f0 <__cmpdf2+0x1c>
 8000548:	f85d 0b04 	ldr.w	r0, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <__aeabi_cdrcmple>:
 8000550:	4684      	mov	ip, r0
 8000552:	4610      	mov	r0, r2
 8000554:	4662      	mov	r2, ip
 8000556:	468c      	mov	ip, r1
 8000558:	4619      	mov	r1, r3
 800055a:	4663      	mov	r3, ip
 800055c:	e000      	b.n	8000560 <__aeabi_cdcmpeq>
 800055e:	bf00      	nop

08000560 <__aeabi_cdcmpeq>:
 8000560:	b501      	push	{r0, lr}
 8000562:	f7ff ffb7 	bl	80004d4 <__cmpdf2>
 8000566:	2800      	cmp	r0, #0
 8000568:	bf48      	it	mi
 800056a:	f110 0f00 	cmnmi.w	r0, #0
 800056e:	bd01      	pop	{r0, pc}

08000570 <__aeabi_dcmpeq>:
 8000570:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000574:	f7ff fff4 	bl	8000560 <__aeabi_cdcmpeq>
 8000578:	bf0c      	ite	eq
 800057a:	2001      	moveq	r0, #1
 800057c:	2000      	movne	r0, #0
 800057e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000582:	bf00      	nop

08000584 <__aeabi_dcmplt>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff ffea 	bl	8000560 <__aeabi_cdcmpeq>
 800058c:	bf34      	ite	cc
 800058e:	2001      	movcc	r0, #1
 8000590:	2000      	movcs	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmple>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffe0 	bl	8000560 <__aeabi_cdcmpeq>
 80005a0:	bf94      	ite	ls
 80005a2:	2001      	movls	r0, #1
 80005a4:	2000      	movhi	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmpge>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffce 	bl	8000550 <__aeabi_cdrcmple>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpgt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffc4 	bl	8000550 <__aeabi_cdrcmple>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_d2iz>:
 80005d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005dc:	d215      	bcs.n	800060a <__aeabi_d2iz+0x36>
 80005de:	d511      	bpl.n	8000604 <__aeabi_d2iz+0x30>
 80005e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005e8:	d912      	bls.n	8000610 <__aeabi_d2iz+0x3c>
 80005ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80005f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005fa:	fa23 f002 	lsr.w	r0, r3, r2
 80005fe:	bf18      	it	ne
 8000600:	4240      	negne	r0, r0
 8000602:	4770      	bx	lr
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	4770      	bx	lr
 800060a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800060e:	d105      	bne.n	800061c <__aeabi_d2iz+0x48>
 8000610:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000614:	bf08      	it	eq
 8000616:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800061a:	4770      	bx	lr
 800061c:	f04f 0000 	mov.w	r0, #0
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <__aeabi_frsub>:
 8000624:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000628:	e002      	b.n	8000630 <__addsf3>
 800062a:	bf00      	nop

0800062c <__aeabi_fsub>:
 800062c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000630 <__addsf3>:
 8000630:	0042      	lsls	r2, r0, #1
 8000632:	bf1f      	itttt	ne
 8000634:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000638:	ea92 0f03 	teqne	r2, r3
 800063c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000640:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000644:	d06a      	beq.n	800071c <__addsf3+0xec>
 8000646:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800064a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800064e:	bfc1      	itttt	gt
 8000650:	18d2      	addgt	r2, r2, r3
 8000652:	4041      	eorgt	r1, r0
 8000654:	4048      	eorgt	r0, r1
 8000656:	4041      	eorgt	r1, r0
 8000658:	bfb8      	it	lt
 800065a:	425b      	neglt	r3, r3
 800065c:	2b19      	cmp	r3, #25
 800065e:	bf88      	it	hi
 8000660:	4770      	bxhi	lr
 8000662:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000666:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800066a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800066e:	bf18      	it	ne
 8000670:	4240      	negne	r0, r0
 8000672:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000676:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800067a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800067e:	bf18      	it	ne
 8000680:	4249      	negne	r1, r1
 8000682:	ea92 0f03 	teq	r2, r3
 8000686:	d03f      	beq.n	8000708 <__addsf3+0xd8>
 8000688:	f1a2 0201 	sub.w	r2, r2, #1
 800068c:	fa41 fc03 	asr.w	ip, r1, r3
 8000690:	eb10 000c 	adds.w	r0, r0, ip
 8000694:	f1c3 0320 	rsb	r3, r3, #32
 8000698:	fa01 f103 	lsl.w	r1, r1, r3
 800069c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006a0:	d502      	bpl.n	80006a8 <__addsf3+0x78>
 80006a2:	4249      	negs	r1, r1
 80006a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006ac:	d313      	bcc.n	80006d6 <__addsf3+0xa6>
 80006ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006b2:	d306      	bcc.n	80006c2 <__addsf3+0x92>
 80006b4:	0840      	lsrs	r0, r0, #1
 80006b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ba:	f102 0201 	add.w	r2, r2, #1
 80006be:	2afe      	cmp	r2, #254	; 0xfe
 80006c0:	d251      	bcs.n	8000766 <__addsf3+0x136>
 80006c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006ca:	bf08      	it	eq
 80006cc:	f020 0001 	biceq.w	r0, r0, #1
 80006d0:	ea40 0003 	orr.w	r0, r0, r3
 80006d4:	4770      	bx	lr
 80006d6:	0049      	lsls	r1, r1, #1
 80006d8:	eb40 0000 	adc.w	r0, r0, r0
 80006dc:	3a01      	subs	r2, #1
 80006de:	bf28      	it	cs
 80006e0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006e4:	d2ed      	bcs.n	80006c2 <__addsf3+0x92>
 80006e6:	fab0 fc80 	clz	ip, r0
 80006ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80006ee:	ebb2 020c 	subs.w	r2, r2, ip
 80006f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80006f6:	bfaa      	itet	ge
 80006f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006fc:	4252      	neglt	r2, r2
 80006fe:	4318      	orrge	r0, r3
 8000700:	bfbc      	itt	lt
 8000702:	40d0      	lsrlt	r0, r2
 8000704:	4318      	orrlt	r0, r3
 8000706:	4770      	bx	lr
 8000708:	f092 0f00 	teq	r2, #0
 800070c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000710:	bf06      	itte	eq
 8000712:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000716:	3201      	addeq	r2, #1
 8000718:	3b01      	subne	r3, #1
 800071a:	e7b5      	b.n	8000688 <__addsf3+0x58>
 800071c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000720:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000724:	bf18      	it	ne
 8000726:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800072a:	d021      	beq.n	8000770 <__addsf3+0x140>
 800072c:	ea92 0f03 	teq	r2, r3
 8000730:	d004      	beq.n	800073c <__addsf3+0x10c>
 8000732:	f092 0f00 	teq	r2, #0
 8000736:	bf08      	it	eq
 8000738:	4608      	moveq	r0, r1
 800073a:	4770      	bx	lr
 800073c:	ea90 0f01 	teq	r0, r1
 8000740:	bf1c      	itt	ne
 8000742:	2000      	movne	r0, #0
 8000744:	4770      	bxne	lr
 8000746:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800074a:	d104      	bne.n	8000756 <__addsf3+0x126>
 800074c:	0040      	lsls	r0, r0, #1
 800074e:	bf28      	it	cs
 8000750:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000754:	4770      	bx	lr
 8000756:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800075a:	bf3c      	itt	cc
 800075c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000760:	4770      	bxcc	lr
 8000762:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000766:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800076a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800076e:	4770      	bx	lr
 8000770:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000774:	bf16      	itet	ne
 8000776:	4608      	movne	r0, r1
 8000778:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800077c:	4601      	movne	r1, r0
 800077e:	0242      	lsls	r2, r0, #9
 8000780:	bf06      	itte	eq
 8000782:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000786:	ea90 0f01 	teqeq	r0, r1
 800078a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800078e:	4770      	bx	lr

08000790 <__aeabi_ui2f>:
 8000790:	f04f 0300 	mov.w	r3, #0
 8000794:	e004      	b.n	80007a0 <__aeabi_i2f+0x8>
 8000796:	bf00      	nop

08000798 <__aeabi_i2f>:
 8000798:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800079c:	bf48      	it	mi
 800079e:	4240      	negmi	r0, r0
 80007a0:	ea5f 0c00 	movs.w	ip, r0
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007ac:	4601      	mov	r1, r0
 80007ae:	f04f 0000 	mov.w	r0, #0
 80007b2:	e01c      	b.n	80007ee <__aeabi_l2f+0x2a>

080007b4 <__aeabi_ul2f>:
 80007b4:	ea50 0201 	orrs.w	r2, r0, r1
 80007b8:	bf08      	it	eq
 80007ba:	4770      	bxeq	lr
 80007bc:	f04f 0300 	mov.w	r3, #0
 80007c0:	e00a      	b.n	80007d8 <__aeabi_l2f+0x14>
 80007c2:	bf00      	nop

080007c4 <__aeabi_l2f>:
 80007c4:	ea50 0201 	orrs.w	r2, r0, r1
 80007c8:	bf08      	it	eq
 80007ca:	4770      	bxeq	lr
 80007cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007d0:	d502      	bpl.n	80007d8 <__aeabi_l2f+0x14>
 80007d2:	4240      	negs	r0, r0
 80007d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007d8:	ea5f 0c01 	movs.w	ip, r1
 80007dc:	bf02      	ittt	eq
 80007de:	4684      	moveq	ip, r0
 80007e0:	4601      	moveq	r1, r0
 80007e2:	2000      	moveq	r0, #0
 80007e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007e8:	bf08      	it	eq
 80007ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007f2:	fabc f28c 	clz	r2, ip
 80007f6:	3a08      	subs	r2, #8
 80007f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007fc:	db10      	blt.n	8000820 <__aeabi_l2f+0x5c>
 80007fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000802:	4463      	add	r3, ip
 8000804:	fa00 fc02 	lsl.w	ip, r0, r2
 8000808:	f1c2 0220 	rsb	r2, r2, #32
 800080c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000810:	fa20 f202 	lsr.w	r2, r0, r2
 8000814:	eb43 0002 	adc.w	r0, r3, r2
 8000818:	bf08      	it	eq
 800081a:	f020 0001 	biceq.w	r0, r0, #1
 800081e:	4770      	bx	lr
 8000820:	f102 0220 	add.w	r2, r2, #32
 8000824:	fa01 fc02 	lsl.w	ip, r1, r2
 8000828:	f1c2 0220 	rsb	r2, r2, #32
 800082c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000830:	fa21 f202 	lsr.w	r2, r1, r2
 8000834:	eb43 0002 	adc.w	r0, r3, r2
 8000838:	bf08      	it	eq
 800083a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800083e:	4770      	bx	lr

08000840 <__aeabi_fmul>:
 8000840:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000844:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000848:	bf1e      	ittt	ne
 800084a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800084e:	ea92 0f0c 	teqne	r2, ip
 8000852:	ea93 0f0c 	teqne	r3, ip
 8000856:	d06f      	beq.n	8000938 <__aeabi_fmul+0xf8>
 8000858:	441a      	add	r2, r3
 800085a:	ea80 0c01 	eor.w	ip, r0, r1
 800085e:	0240      	lsls	r0, r0, #9
 8000860:	bf18      	it	ne
 8000862:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000866:	d01e      	beq.n	80008a6 <__aeabi_fmul+0x66>
 8000868:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800086c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000870:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000874:	fba0 3101 	umull	r3, r1, r0, r1
 8000878:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800087c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000880:	bf3e      	ittt	cc
 8000882:	0049      	lslcc	r1, r1, #1
 8000884:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000888:	005b      	lslcc	r3, r3, #1
 800088a:	ea40 0001 	orr.w	r0, r0, r1
 800088e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000892:	2afd      	cmp	r2, #253	; 0xfd
 8000894:	d81d      	bhi.n	80008d2 <__aeabi_fmul+0x92>
 8000896:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800089a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800089e:	bf08      	it	eq
 80008a0:	f020 0001 	biceq.w	r0, r0, #1
 80008a4:	4770      	bx	lr
 80008a6:	f090 0f00 	teq	r0, #0
 80008aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ae:	bf08      	it	eq
 80008b0:	0249      	lsleq	r1, r1, #9
 80008b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008ba:	3a7f      	subs	r2, #127	; 0x7f
 80008bc:	bfc2      	ittt	gt
 80008be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008c6:	4770      	bxgt	lr
 80008c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008cc:	f04f 0300 	mov.w	r3, #0
 80008d0:	3a01      	subs	r2, #1
 80008d2:	dc5d      	bgt.n	8000990 <__aeabi_fmul+0x150>
 80008d4:	f112 0f19 	cmn.w	r2, #25
 80008d8:	bfdc      	itt	le
 80008da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80008de:	4770      	bxle	lr
 80008e0:	f1c2 0200 	rsb	r2, r2, #0
 80008e4:	0041      	lsls	r1, r0, #1
 80008e6:	fa21 f102 	lsr.w	r1, r1, r2
 80008ea:	f1c2 0220 	rsb	r2, r2, #32
 80008ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80008f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80008f6:	f140 0000 	adc.w	r0, r0, #0
 80008fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008fe:	bf08      	it	eq
 8000900:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000904:	4770      	bx	lr
 8000906:	f092 0f00 	teq	r2, #0
 800090a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800090e:	bf02      	ittt	eq
 8000910:	0040      	lsleq	r0, r0, #1
 8000912:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000916:	3a01      	subeq	r2, #1
 8000918:	d0f9      	beq.n	800090e <__aeabi_fmul+0xce>
 800091a:	ea40 000c 	orr.w	r0, r0, ip
 800091e:	f093 0f00 	teq	r3, #0
 8000922:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000926:	bf02      	ittt	eq
 8000928:	0049      	lsleq	r1, r1, #1
 800092a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800092e:	3b01      	subeq	r3, #1
 8000930:	d0f9      	beq.n	8000926 <__aeabi_fmul+0xe6>
 8000932:	ea41 010c 	orr.w	r1, r1, ip
 8000936:	e78f      	b.n	8000858 <__aeabi_fmul+0x18>
 8000938:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800093c:	ea92 0f0c 	teq	r2, ip
 8000940:	bf18      	it	ne
 8000942:	ea93 0f0c 	teqne	r3, ip
 8000946:	d00a      	beq.n	800095e <__aeabi_fmul+0x11e>
 8000948:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800094c:	bf18      	it	ne
 800094e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000952:	d1d8      	bne.n	8000906 <__aeabi_fmul+0xc6>
 8000954:	ea80 0001 	eor.w	r0, r0, r1
 8000958:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800095c:	4770      	bx	lr
 800095e:	f090 0f00 	teq	r0, #0
 8000962:	bf17      	itett	ne
 8000964:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000968:	4608      	moveq	r0, r1
 800096a:	f091 0f00 	teqne	r1, #0
 800096e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000972:	d014      	beq.n	800099e <__aeabi_fmul+0x15e>
 8000974:	ea92 0f0c 	teq	r2, ip
 8000978:	d101      	bne.n	800097e <__aeabi_fmul+0x13e>
 800097a:	0242      	lsls	r2, r0, #9
 800097c:	d10f      	bne.n	800099e <__aeabi_fmul+0x15e>
 800097e:	ea93 0f0c 	teq	r3, ip
 8000982:	d103      	bne.n	800098c <__aeabi_fmul+0x14c>
 8000984:	024b      	lsls	r3, r1, #9
 8000986:	bf18      	it	ne
 8000988:	4608      	movne	r0, r1
 800098a:	d108      	bne.n	800099e <__aeabi_fmul+0x15e>
 800098c:	ea80 0001 	eor.w	r0, r0, r1
 8000990:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000994:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000998:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800099c:	4770      	bx	lr
 800099e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009a6:	4770      	bx	lr

080009a8 <__aeabi_fdiv>:
 80009a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009b0:	bf1e      	ittt	ne
 80009b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009b6:	ea92 0f0c 	teqne	r2, ip
 80009ba:	ea93 0f0c 	teqne	r3, ip
 80009be:	d069      	beq.n	8000a94 <__aeabi_fdiv+0xec>
 80009c0:	eba2 0203 	sub.w	r2, r2, r3
 80009c4:	ea80 0c01 	eor.w	ip, r0, r1
 80009c8:	0249      	lsls	r1, r1, #9
 80009ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009ce:	d037      	beq.n	8000a40 <__aeabi_fdiv+0x98>
 80009d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009e0:	428b      	cmp	r3, r1
 80009e2:	bf38      	it	cc
 80009e4:	005b      	lslcc	r3, r3, #1
 80009e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80009ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009ee:	428b      	cmp	r3, r1
 80009f0:	bf24      	itt	cs
 80009f2:	1a5b      	subcs	r3, r3, r1
 80009f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80009f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009fc:	bf24      	itt	cs
 80009fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a02:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a06:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a0a:	bf24      	itt	cs
 8000a0c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a14:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a18:	bf24      	itt	cs
 8000a1a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a1e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a22:	011b      	lsls	r3, r3, #4
 8000a24:	bf18      	it	ne
 8000a26:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a2a:	d1e0      	bne.n	80009ee <__aeabi_fdiv+0x46>
 8000a2c:	2afd      	cmp	r2, #253	; 0xfd
 8000a2e:	f63f af50 	bhi.w	80008d2 <__aeabi_fmul+0x92>
 8000a32:	428b      	cmp	r3, r1
 8000a34:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a38:	bf08      	it	eq
 8000a3a:	f020 0001 	biceq.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a44:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a48:	327f      	adds	r2, #127	; 0x7f
 8000a4a:	bfc2      	ittt	gt
 8000a4c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a50:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a54:	4770      	bxgt	lr
 8000a56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5a:	f04f 0300 	mov.w	r3, #0
 8000a5e:	3a01      	subs	r2, #1
 8000a60:	e737      	b.n	80008d2 <__aeabi_fmul+0x92>
 8000a62:	f092 0f00 	teq	r2, #0
 8000a66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a6a:	bf02      	ittt	eq
 8000a6c:	0040      	lsleq	r0, r0, #1
 8000a6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a72:	3a01      	subeq	r2, #1
 8000a74:	d0f9      	beq.n	8000a6a <__aeabi_fdiv+0xc2>
 8000a76:	ea40 000c 	orr.w	r0, r0, ip
 8000a7a:	f093 0f00 	teq	r3, #0
 8000a7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a82:	bf02      	ittt	eq
 8000a84:	0049      	lsleq	r1, r1, #1
 8000a86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a8a:	3b01      	subeq	r3, #1
 8000a8c:	d0f9      	beq.n	8000a82 <__aeabi_fdiv+0xda>
 8000a8e:	ea41 010c 	orr.w	r1, r1, ip
 8000a92:	e795      	b.n	80009c0 <__aeabi_fdiv+0x18>
 8000a94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a98:	ea92 0f0c 	teq	r2, ip
 8000a9c:	d108      	bne.n	8000ab0 <__aeabi_fdiv+0x108>
 8000a9e:	0242      	lsls	r2, r0, #9
 8000aa0:	f47f af7d 	bne.w	800099e <__aeabi_fmul+0x15e>
 8000aa4:	ea93 0f0c 	teq	r3, ip
 8000aa8:	f47f af70 	bne.w	800098c <__aeabi_fmul+0x14c>
 8000aac:	4608      	mov	r0, r1
 8000aae:	e776      	b.n	800099e <__aeabi_fmul+0x15e>
 8000ab0:	ea93 0f0c 	teq	r3, ip
 8000ab4:	d104      	bne.n	8000ac0 <__aeabi_fdiv+0x118>
 8000ab6:	024b      	lsls	r3, r1, #9
 8000ab8:	f43f af4c 	beq.w	8000954 <__aeabi_fmul+0x114>
 8000abc:	4608      	mov	r0, r1
 8000abe:	e76e      	b.n	800099e <__aeabi_fmul+0x15e>
 8000ac0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ac4:	bf18      	it	ne
 8000ac6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000aca:	d1ca      	bne.n	8000a62 <__aeabi_fdiv+0xba>
 8000acc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ad0:	f47f af5c 	bne.w	800098c <__aeabi_fmul+0x14c>
 8000ad4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ad8:	f47f af3c 	bne.w	8000954 <__aeabi_fmul+0x114>
 8000adc:	e75f      	b.n	800099e <__aeabi_fmul+0x15e>
 8000ade:	bf00      	nop

08000ae0 <Ping_Latch>:
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void Ping_Latch()
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, PinHigh);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2110      	movs	r1, #16
 8000ae8:	4804      	ldr	r0, [pc, #16]	; (8000afc <Ping_Latch+0x1c>)
 8000aea:	f001 faef 	bl	80020cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, PinLow);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2110      	movs	r1, #16
 8000af2:	4802      	ldr	r0, [pc, #8]	; (8000afc <Ping_Latch+0x1c>)
 8000af4:	f001 faea 	bl	80020cc <HAL_GPIO_WritePin>
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40010c00 	.word	0x40010c00

08000b00 <SetVoxelByXYZ>:
	int k = *x * 100 + *y * 10 + *z;
	int n = ((k + 2 - *x * 100) % 8);
	TurnBitOn(&cubeBufferBytes[*x][((k + 2 - *x * 100) / 8)], &n);
}
void SetVoxelByXYZ(byte x, byte y, byte z)
{
 8000b00:	b490      	push	{r4, r7}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	71bb      	strb	r3, [r7, #6]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	717b      	strb	r3, [r7, #5]
	if(x > 9 || x < 0 || y > 9 || y < 0 || z > 9 || z <0)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	2b09      	cmp	r3, #9
 8000b18:	dc63      	bgt.n	8000be2 <SetVoxelByXYZ+0xe2>
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	db5f      	blt.n	8000be2 <SetVoxelByXYZ+0xe2>
 8000b22:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b26:	2b09      	cmp	r3, #9
 8000b28:	dc5b      	bgt.n	8000be2 <SetVoxelByXYZ+0xe2>
 8000b2a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	db57      	blt.n	8000be2 <SetVoxelByXYZ+0xe2>
 8000b32:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b36:	2b09      	cmp	r3, #9
 8000b38:	dc53      	bgt.n	8000be2 <SetVoxelByXYZ+0xe2>
 8000b3a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	db4f      	blt.n	8000be2 <SetVoxelByXYZ+0xe2>
		return;
	int k = x * 100 + y * 10 + z;
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	2264      	movs	r2, #100	; 0x64
 8000b48:	fb02 f103 	mul.w	r1, r2, r3
 8000b4c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000b50:	4613      	mov	r3, r2
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	4413      	add	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	18ca      	adds	r2, r1, r3
 8000b5a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b5e:	4413      	add	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
	int n = ((k + 2 - x * 100) % 8);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	1c9a      	adds	r2, r3, #2
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8000b6e:	fb01 f303 	mul.w	r3, r1, r3
 8000b72:	4413      	add	r3, r2
 8000b74:	425a      	negs	r2, r3
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	f002 0207 	and.w	r2, r2, #7
 8000b7e:	bf58      	it	pl
 8000b80:	4253      	negpl	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
	TurnBitOn(&cubeBufferBytes[x][((k + 2 - x * 100) / 8)], &n);
 8000b84:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	1c99      	adds	r1, r3, #2
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8000b94:	fb00 f303 	mul.w	r3, r0, r3
 8000b98:	440b      	add	r3, r1
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	da00      	bge.n	8000ba0 <SetVoxelByXYZ+0xa0>
 8000b9e:	3307      	adds	r3, #7
 8000ba0:	10db      	asrs	r3, r3, #3
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4811      	ldr	r0, [pc, #68]	; (8000bec <SetVoxelByXYZ+0xec>)
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	4413      	add	r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	4413      	add	r3, r2
 8000bb0:	4403      	add	r3, r0
 8000bb2:	440b      	add	r3, r1
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b25a      	sxtb	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	2001      	movs	r0, #1
 8000bbc:	fa00 f303 	lsl.w	r3, r0, r3
 8000bc0:	b25b      	sxtb	r3, r3
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	b25b      	sxtb	r3, r3
 8000bc6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000bca:	b2dc      	uxtb	r4, r3
 8000bcc:	4807      	ldr	r0, [pc, #28]	; (8000bec <SetVoxelByXYZ+0xec>)
 8000bce:	4613      	mov	r3, r2
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	4413      	add	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4403      	add	r3, r0
 8000bda:	440b      	add	r3, r1
 8000bdc:	4622      	mov	r2, r4
 8000bde:	701a      	strb	r2, [r3, #0]
 8000be0:	e000      	b.n	8000be4 <SetVoxelByXYZ+0xe4>
		return;
 8000be2:	bf00      	nop
}
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc90      	pop	{r4, r7}
 8000bea:	4770      	bx	lr
 8000bec:	200001b0 	.word	0x200001b0

08000bf0 <Draw3DLine>:


void Draw3DLine(Point3 a, Point3 b, byte excludeEndPoints)
{
 8000bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bf4:	b086      	sub	sp, #24
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	60f8      	str	r0, [r7, #12]
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	71fb      	strb	r3, [r7, #7]
	byte length = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	75fb      	strb	r3, [r7, #23]
	byte l1 = (byte)abs(a.x - b.x);
 8000c04:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	bfb8      	it	lt
 8000c14:	425b      	neglt	r3, r3
 8000c16:	757b      	strb	r3, [r7, #21]
	byte l2 = (byte)abs(a.y - b.y);
 8000c18:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	bfb8      	it	lt
 8000c28:	425b      	neglt	r3, r3
 8000c2a:	753b      	strb	r3, [r7, #20]
	byte l3 = (byte)abs(a.z - b.z);
 8000c2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c30:	461a      	mov	r2, r3
 8000c32:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	bfb8      	it	lt
 8000c3c:	425b      	neglt	r3, r3
 8000c3e:	74fb      	strb	r3, [r7, #19]
	length = l1;
 8000c40:	7d7b      	ldrb	r3, [r7, #21]
 8000c42:	75fb      	strb	r3, [r7, #23]
	if(l2 > l1)
 8000c44:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8000c48:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	dd01      	ble.n	8000c54 <Draw3DLine+0x64>
		length = l2;
 8000c50:	7d3b      	ldrb	r3, [r7, #20]
 8000c52:	75fb      	strb	r3, [r7, #23]
	if(l3 > l2)
 8000c54:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8000c58:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	dd01      	ble.n	8000c64 <Draw3DLine+0x74>
		length = l3;
 8000c60:	7cfb      	ldrb	r3, [r7, #19]
 8000c62:	75fb      	strb	r3, [r7, #23]
	byte x,y,z;
	if(excludeEndPoints == 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d111      	bne.n	8000c90 <Draw3DLine+0xa0>
	{
		SetVoxelByXYZ(a.x, a.y, a.z);
 8000c6c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000c70:	f997 100d 	ldrsb.w	r1, [r7, #13]
 8000c74:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff41 	bl	8000b00 <SetVoxelByXYZ>
		SetVoxelByXYZ(b.x, b.y, b.z);
 8000c7e:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000c82:	f997 1009 	ldrsb.w	r1, [r7, #9]
 8000c86:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ff38 	bl	8000b00 <SetVoxelByXYZ>
	}
	for (byte i = 1; i < length; i++)
 8000c90:	2301      	movs	r3, #1
 8000c92:	75bb      	strb	r3, [r7, #22]
 8000c94:	e0c8      	b.n	8000e28 <Draw3DLine+0x238>
	{
		x = StraightLine(a, b, x, i, length);// (byte)(a->x + (b->x - a->x) * i / length);
 8000c96:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fba8 	bl	80003f0 <__aeabi_i2d>
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460d      	mov	r5, r1
 8000ca4:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fd71 	bl	8000798 <__aeabi_i2f>
 8000cb6:	4606      	mov	r6, r0
 8000cb8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fd6b 	bl	8000798 <__aeabi_i2f>
 8000cc2:	4680      	mov	r8, r0
 8000cc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fd65 	bl	8000798 <__aeabi_i2f>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4640      	mov	r0, r8
 8000cd4:	f7ff fe68 	bl	80009a8 <__aeabi_fdiv>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4630      	mov	r0, r6
 8000cde:	f7ff fdaf 	bl	8000840 <__aeabi_fmul>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fb95 	bl	8000414 <__aeabi_f2d>
 8000cea:	4602      	mov	r2, r0
 8000cec:	460b      	mov	r3, r1
 8000cee:	4610      	mov	r0, r2
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f003 fd1d 	bl	8004730 <round>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	4629      	mov	r1, r5
 8000cfe:	f7ff fa2b 	bl	8000158 <__adddf3>
 8000d02:	4602      	mov	r2, r0
 8000d04:	460b      	mov	r3, r1
 8000d06:	4610      	mov	r0, r2
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f7ff fc63 	bl	80005d4 <__aeabi_d2iz>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	74bb      	strb	r3, [r7, #18]
		y = StraightLine(a, b, y, i, length);
 8000d12:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fb6a 	bl	80003f0 <__aeabi_i2d>
 8000d1c:	4604      	mov	r4, r0
 8000d1e:	460d      	mov	r5, r1
 8000d20:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8000d24:	461a      	mov	r2, r3
 8000d26:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fd33 	bl	8000798 <__aeabi_i2f>
 8000d32:	4606      	mov	r6, r0
 8000d34:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fd2d 	bl	8000798 <__aeabi_i2f>
 8000d3e:	4680      	mov	r8, r0
 8000d40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fd27 	bl	8000798 <__aeabi_i2f>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4640      	mov	r0, r8
 8000d50:	f7ff fe2a 	bl	80009a8 <__aeabi_fdiv>
 8000d54:	4603      	mov	r3, r0
 8000d56:	4619      	mov	r1, r3
 8000d58:	4630      	mov	r0, r6
 8000d5a:	f7ff fd71 	bl	8000840 <__aeabi_fmul>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fb57 	bl	8000414 <__aeabi_f2d>
 8000d66:	4602      	mov	r2, r0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	4610      	mov	r0, r2
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f003 fcdf 	bl	8004730 <round>
 8000d72:	4602      	mov	r2, r0
 8000d74:	460b      	mov	r3, r1
 8000d76:	4620      	mov	r0, r4
 8000d78:	4629      	mov	r1, r5
 8000d7a:	f7ff f9ed 	bl	8000158 <__adddf3>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	460b      	mov	r3, r1
 8000d82:	4610      	mov	r0, r2
 8000d84:	4619      	mov	r1, r3
 8000d86:	f7ff fc25 	bl	80005d4 <__aeabi_d2iz>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	747b      	strb	r3, [r7, #17]
		z = StraightLine(a, b, z, i, length);
 8000d8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fb2c 	bl	80003f0 <__aeabi_i2d>
 8000d98:	4604      	mov	r4, r0
 8000d9a:	460d      	mov	r5, r1
 8000d9c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000da0:	461a      	mov	r2, r3
 8000da2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fcf5 	bl	8000798 <__aeabi_i2f>
 8000dae:	4606      	mov	r6, r0
 8000db0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fcef 	bl	8000798 <__aeabi_i2f>
 8000dba:	4680      	mov	r8, r0
 8000dbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fce9 	bl	8000798 <__aeabi_i2f>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4640      	mov	r0, r8
 8000dcc:	f7ff fdec 	bl	80009a8 <__aeabi_fdiv>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	f7ff fd33 	bl	8000840 <__aeabi_fmul>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fb19 	bl	8000414 <__aeabi_f2d>
 8000de2:	4602      	mov	r2, r0
 8000de4:	460b      	mov	r3, r1
 8000de6:	4610      	mov	r0, r2
 8000de8:	4619      	mov	r1, r3
 8000dea:	f003 fca1 	bl	8004730 <round>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	4620      	mov	r0, r4
 8000df4:	4629      	mov	r1, r5
 8000df6:	f7ff f9af 	bl	8000158 <__adddf3>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	4610      	mov	r0, r2
 8000e00:	4619      	mov	r1, r3
 8000e02:	f7ff fbe7 	bl	80005d4 <__aeabi_d2iz>
 8000e06:	4603      	mov	r3, r0
 8000e08:	743b      	strb	r3, [r7, #16]
		SetVoxelByXYZ(x, y, z);
 8000e0a:	f997 2010 	ldrsb.w	r2, [r7, #16]
 8000e0e:	f997 1011 	ldrsb.w	r1, [r7, #17]
 8000e12:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fe72 	bl	8000b00 <SetVoxelByXYZ>
	for (byte i = 1; i < length; i++)
 8000e1c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	3301      	adds	r3, #1
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	75bb      	strb	r3, [r7, #22]
 8000e28:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000e2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	f6ff af30 	blt.w	8000c96 <Draw3DLine+0xa6>
	}
}
 8000e36:	bf00      	nop
 8000e38:	bf00      	nop
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000e42 <drawSquare>:
		drawCirclePointsByXYZP(x, y, center, layerIndex, co);
	}
}

void drawSquare(Point3 topLeft, byte size, figure2dOrientation o)
{
 8000e42:	b590      	push	{r4, r7, lr}
 8000e44:	b095      	sub	sp, #84	; 0x54
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	70fb      	strb	r3, [r7, #3]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	70bb      	strb	r3, [r7, #2]
	Point3 c1;
	Point3 c2;
	Point3 c3;
	Point3 c4;
	switch(o)
 8000e52:	78bb      	ldrb	r3, [r7, #2]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	f000 8137 	beq.w	80010c8 <drawSquare+0x286>
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	f300 81cb 	bgt.w	80011f6 <drawSquare+0x3b4>
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <drawSquare+0x2a>
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	f000 809a 	beq.w	8000f9e <drawSquare+0x15c>
				DrawLine(c1,c3);
			}
			break;
		}
		default:
			break;
 8000e6a:	e1c4      	b.n	80011f6 <drawSquare+0x3b4>
			for(byte i = 0; i < 2; i++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000e72:	e08e      	b.n	8000f92 <drawSquare+0x150>
				c1 = (Point3){topLeft.x, topLeft.y, topLeft.z + (i * size)};
 8000e74:	f997 4004 	ldrsb.w	r4, [r7, #4]
 8000e78:	f997 0005 	ldrsb.w	r0, [r7, #5]
 8000e7c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000e86:	78f9      	ldrb	r1, [r7, #3]
 8000e88:	fb01 f303 	mul.w	r3, r1, r3
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	4413      	add	r3, r2
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	b25b      	sxtb	r3, r3
 8000e94:	4622      	mov	r2, r4
 8000e96:	f887 2048 	strb.w	r2, [r7, #72]	; 0x48
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	f887 2049 	strb.w	r2, [r7, #73]	; 0x49
 8000ea0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
				c2 = (Point3){topLeft.x + size, topLeft.y, topLeft.z + (i * size)};
 8000ea4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	78fb      	ldrb	r3, [r7, #3]
 8000eac:	4413      	add	r3, r2
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	b25c      	sxtb	r4, r3
 8000eb2:	f997 0005 	ldrsb.w	r0, [r7, #5]
 8000eb6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000ec0:	78f9      	ldrb	r1, [r7, #3]
 8000ec2:	fb01 f303 	mul.w	r3, r1, r3
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	4413      	add	r3, r2
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	b25b      	sxtb	r3, r3
 8000ece:	4622      	mov	r2, r4
 8000ed0:	f887 2044 	strb.w	r2, [r7, #68]	; 0x44
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f887 2045 	strb.w	r2, [r7, #69]	; 0x45
 8000eda:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				c3 = (Point3){topLeft.x, topLeft.y + size, topLeft.z + (i * size)};
 8000ede:	f997 4004 	ldrsb.w	r4, [r7, #4]
 8000ee2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	4413      	add	r3, r2
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	b258      	sxtb	r0, r3
 8000ef0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000efa:	78f9      	ldrb	r1, [r7, #3]
 8000efc:	fb01 f303 	mul.w	r3, r1, r3
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	4413      	add	r3, r2
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	4622      	mov	r2, r4
 8000f0a:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
 8000f0e:	4602      	mov	r2, r0
 8000f10:	f887 2041 	strb.w	r2, [r7, #65]	; 0x41
 8000f14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
				c4 = (Point3){topLeft.x + size, topLeft.y + size, topLeft.z + (i * size)};
 8000f18:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	78fb      	ldrb	r3, [r7, #3]
 8000f20:	4413      	add	r3, r2
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	b25c      	sxtb	r4, r3
 8000f26:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	78fb      	ldrb	r3, [r7, #3]
 8000f2e:	4413      	add	r3, r2
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	b258      	sxtb	r0, r3
 8000f34:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000f3e:	78f9      	ldrb	r1, [r7, #3]
 8000f40:	fb01 f303 	mul.w	r3, r1, r3
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	4413      	add	r3, r2
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	4622      	mov	r2, r4
 8000f4e:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
 8000f52:	4602      	mov	r2, r0
 8000f54:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 8000f58:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				DrawLine(c1,c2);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000f60:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000f62:	f7ff fe45 	bl	8000bf0 <Draw3DLine>
				DrawLine(c2,c4);
 8000f66:	2200      	movs	r2, #0
 8000f68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000f6a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000f6c:	f7ff fe40 	bl	8000bf0 <Draw3DLine>
				DrawLine(c4,c3);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000f74:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000f76:	f7ff fe3b 	bl	8000bf0 <Draw3DLine>
				DrawLine(c1,c3);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000f7e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000f80:	f7ff fe36 	bl	8000bf0 <Draw3DLine>
			for(byte i = 0; i < 2; i++)
 8000f84:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000f92:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	f77f af6c 	ble.w	8000e74 <drawSquare+0x32>
			break;
 8000f9c:	e12c      	b.n	80011f8 <drawSquare+0x3b6>
			for(byte i = 0; i < 2; i++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000fa4:	e08a      	b.n	80010bc <drawSquare+0x27a>
				c1 = (Point3){topLeft.x + (i * size), topLeft.y, topLeft.z};
 8000fa6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000fb0:	78f9      	ldrb	r1, [r7, #3]
 8000fb2:	fb01 f303 	mul.w	r3, r1, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	4413      	add	r3, r2
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	b259      	sxtb	r1, r3
 8000fbe:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8000fc2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fc6:	f887 1048 	strb.w	r1, [r7, #72]	; 0x48
 8000fca:	f887 2049 	strb.w	r2, [r7, #73]	; 0x49
 8000fce:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
				c2 = (Point3){topLeft.x + (i * size), topLeft.y + size, topLeft.z};
 8000fd2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000fdc:	78f9      	ldrb	r1, [r7, #3]
 8000fde:	fb01 f303 	mul.w	r3, r1, r3
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	b259      	sxtb	r1, r3
 8000fea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	78fb      	ldrb	r3, [r7, #3]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	b25a      	sxtb	r2, r3
 8000ff8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ffc:	f887 1044 	strb.w	r1, [r7, #68]	; 0x44
 8001000:	f887 2045 	strb.w	r2, [r7, #69]	; 0x45
 8001004:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				c3 = (Point3){topLeft.x + (i * size), topLeft.y, topLeft.z + size};
 8001008:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001012:	78f9      	ldrb	r1, [r7, #3]
 8001014:	fb01 f303 	mul.w	r3, r1, r3
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4413      	add	r3, r2
 800101c:	b2db      	uxtb	r3, r3
 800101e:	b258      	sxtb	r0, r3
 8001020:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8001024:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	78fb      	ldrb	r3, [r7, #3]
 800102c:	4413      	add	r3, r2
 800102e:	b2db      	uxtb	r3, r3
 8001030:	b25b      	sxtb	r3, r3
 8001032:	4602      	mov	r2, r0
 8001034:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
 8001038:	460a      	mov	r2, r1
 800103a:	f887 2041 	strb.w	r2, [r7, #65]	; 0x41
 800103e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
				c4 = (Point3){topLeft.x + (i * size), topLeft.y + size, topLeft.z + size};
 8001042:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800104c:	78f9      	ldrb	r1, [r7, #3]
 800104e:	fb01 f303 	mul.w	r3, r1, r3
 8001052:	b2db      	uxtb	r3, r3
 8001054:	4413      	add	r3, r2
 8001056:	b2db      	uxtb	r3, r3
 8001058:	b258      	sxtb	r0, r3
 800105a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	4413      	add	r3, r2
 8001064:	b2db      	uxtb	r3, r3
 8001066:	b259      	sxtb	r1, r3
 8001068:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	4413      	add	r3, r2
 8001072:	b2db      	uxtb	r3, r3
 8001074:	b25b      	sxtb	r3, r3
 8001076:	4602      	mov	r2, r0
 8001078:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
 800107c:	460a      	mov	r2, r1
 800107e:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 8001082:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				DrawLine(c1,c2);
 8001086:	2200      	movs	r2, #0
 8001088:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800108a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800108c:	f7ff fdb0 	bl	8000bf0 <Draw3DLine>
				DrawLine(c2,c4);
 8001090:	2200      	movs	r2, #0
 8001092:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001094:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001096:	f7ff fdab 	bl	8000bf0 <Draw3DLine>
				DrawLine(c4,c3);
 800109a:	2200      	movs	r2, #0
 800109c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800109e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80010a0:	f7ff fda6 	bl	8000bf0 <Draw3DLine>
				DrawLine(c1,c3);
 80010a4:	2200      	movs	r2, #0
 80010a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80010a8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80010aa:	f7ff fda1 	bl	8000bf0 <Draw3DLine>
			for(byte i = 0; i < 2; i++)
 80010ae:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	3301      	adds	r3, #1
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80010bc:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	f77f af70 	ble.w	8000fa6 <drawSquare+0x164>
			break;
 80010c6:	e097      	b.n	80011f8 <drawSquare+0x3b6>
			for(byte i = 0; i < 2; i++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80010ce:	e08c      	b.n	80011ea <drawSquare+0x3a8>
				c1 = (Point3){topLeft.x, topLeft.y + (i * size), topLeft.z};
 80010d0:	f997 0004 	ldrsb.w	r0, [r7, #4]
 80010d4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80010de:	78f9      	ldrb	r1, [r7, #3]
 80010e0:	fb01 f303 	mul.w	r3, r1, r3
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	4413      	add	r3, r2
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	b25a      	sxtb	r2, r3
 80010ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010f0:	4601      	mov	r1, r0
 80010f2:	f887 1048 	strb.w	r1, [r7, #72]	; 0x48
 80010f6:	f887 2049 	strb.w	r2, [r7, #73]	; 0x49
 80010fa:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
				c2 = (Point3){topLeft.x + size, topLeft.y + (i * size), topLeft.z};
 80010fe:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	4413      	add	r3, r2
 8001108:	b2db      	uxtb	r3, r3
 800110a:	b258      	sxtb	r0, r3
 800110c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001116:	78f9      	ldrb	r1, [r7, #3]
 8001118:	fb01 f303 	mul.w	r3, r1, r3
 800111c:	b2db      	uxtb	r3, r3
 800111e:	4413      	add	r3, r2
 8001120:	b2db      	uxtb	r3, r3
 8001122:	b25a      	sxtb	r2, r3
 8001124:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001128:	4601      	mov	r1, r0
 800112a:	f887 1044 	strb.w	r1, [r7, #68]	; 0x44
 800112e:	f887 2045 	strb.w	r2, [r7, #69]	; 0x45
 8001132:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				c3 = (Point3){topLeft.x, topLeft.y + (i * size), topLeft.z + size};
 8001136:	f997 0004 	ldrsb.w	r0, [r7, #4]
 800113a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001144:	78f9      	ldrb	r1, [r7, #3]
 8001146:	fb01 f303 	mul.w	r3, r1, r3
 800114a:	b2db      	uxtb	r3, r3
 800114c:	4413      	add	r3, r2
 800114e:	b2db      	uxtb	r3, r3
 8001150:	b259      	sxtb	r1, r3
 8001152:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001156:	b2da      	uxtb	r2, r3
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	4413      	add	r3, r2
 800115c:	b2db      	uxtb	r3, r3
 800115e:	b25b      	sxtb	r3, r3
 8001160:	4602      	mov	r2, r0
 8001162:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
 8001166:	460a      	mov	r2, r1
 8001168:	f887 2041 	strb.w	r2, [r7, #65]	; 0x41
 800116c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
				c4 = (Point3){topLeft.x + size, topLeft.y + (i * size), topLeft.z + size};
 8001170:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	78fb      	ldrb	r3, [r7, #3]
 8001178:	4413      	add	r3, r2
 800117a:	b2db      	uxtb	r3, r3
 800117c:	b258      	sxtb	r0, r3
 800117e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001188:	78f9      	ldrb	r1, [r7, #3]
 800118a:	fb01 f303 	mul.w	r3, r1, r3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	4413      	add	r3, r2
 8001192:	b2db      	uxtb	r3, r3
 8001194:	b259      	sxtb	r1, r3
 8001196:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	4413      	add	r3, r2
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	4602      	mov	r2, r0
 80011a6:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
 80011aa:	460a      	mov	r2, r1
 80011ac:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 80011b0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				DrawLine(c1,c2);
 80011b4:	2200      	movs	r2, #0
 80011b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80011b8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80011ba:	f7ff fd19 	bl	8000bf0 <Draw3DLine>
				DrawLine(c2,c4);
 80011be:	2200      	movs	r2, #0
 80011c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80011c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80011c4:	f7ff fd14 	bl	8000bf0 <Draw3DLine>
				DrawLine(c4,c3);
 80011c8:	2200      	movs	r2, #0
 80011ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80011cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80011ce:	f7ff fd0f 	bl	8000bf0 <Draw3DLine>
				DrawLine(c1,c3);
 80011d2:	2200      	movs	r2, #0
 80011d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80011d6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80011d8:	f7ff fd0a 	bl	8000bf0 <Draw3DLine>
			for(byte i = 0; i < 2; i++)
 80011dc:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	3301      	adds	r3, #1
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80011ea:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	f77f af6e 	ble.w	80010d0 <drawSquare+0x28e>
			break;
 80011f4:	e000      	b.n	80011f8 <drawSquare+0x3b6>
			break;
 80011f6:	bf00      	nop
	}
}
 80011f8:	bf00      	nop
 80011fa:	3754      	adds	r7, #84	; 0x54
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd90      	pop	{r4, r7, pc}

08001200 <DrawCube>:

void DrawCube(Point3 leftTopZ, byte size)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	70fb      	strb	r3, [r7, #3]
	drawSquare(leftTopZ, size, figure2dOrientationXY);
 800120c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001210:	2200      	movs	r2, #0
 8001212:	4619      	mov	r1, r3
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff fe14 	bl	8000e42 <drawSquare>
	drawSquare(leftTopZ, size, figure2dOrientationYZ);
 800121a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800121e:	2201      	movs	r2, #1
 8001220:	4619      	mov	r1, r3
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff fe0d 	bl	8000e42 <drawSquare>
	drawSquare(leftTopZ, size, figure2dOrientationXZ);
 8001228:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800122c:	2202      	movs	r2, #2
 800122e:	4619      	mov	r1, r3
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff fe06 	bl	8000e42 <drawSquare>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <Render>:


void Render(byte i)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
	switch(i)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	2b08      	cmp	r3, #8
 8001250:	d002      	beq.n	8001258 <Render+0x18>
 8001252:	2b09      	cmp	r3, #9
 8001254:	d01b      	beq.n	800128e <Render+0x4e>
 8001256:	e035      	b.n	80012c4 <Render+0x84>
	{
		case 8:
		{
			cubeLayerBytes[1] = 0;
 8001258:	4b35      	ldr	r3, [pc, #212]	; (8001330 <Render+0xf0>)
 800125a:	2200      	movs	r2, #0
 800125c:	705a      	strb	r2, [r3, #1]
			cubeLayerBytes[0] = cubeBytes[i][12] & 0b00111111;
 800125e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001262:	4934      	ldr	r1, [pc, #208]	; (8001334 <Render+0xf4>)
 8001264:	4613      	mov	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4413      	add	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	440b      	add	r3, r1
 8001270:	330c      	adds	r3, #12
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <Render+0xf0>)
 800127c:	701a      	strb	r2, [r3, #0]
			cubeLayerBytes[0] |= 0b10000000;
 800127e:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <Render+0xf0>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001286:	b2da      	uxtb	r2, r3
 8001288:	4b29      	ldr	r3, [pc, #164]	; (8001330 <Render+0xf0>)
 800128a:	701a      	strb	r2, [r3, #0]
			break;
 800128c:	e035      	b.n	80012fa <Render+0xba>
		}
		case 9:
		{
			cubeLayerBytes[1] = 0;
 800128e:	4b28      	ldr	r3, [pc, #160]	; (8001330 <Render+0xf0>)
 8001290:	2200      	movs	r2, #0
 8001292:	705a      	strb	r2, [r3, #1]
			cubeLayerBytes[0] = cubeBytes[i][12] & 0b00111111;
 8001294:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001298:	4926      	ldr	r1, [pc, #152]	; (8001334 <Render+0xf4>)
 800129a:	4613      	mov	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	440b      	add	r3, r1
 80012a6:	330c      	adds	r3, #12
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <Render+0xf0>)
 80012b2:	701a      	strb	r2, [r3, #0]
			cubeLayerBytes[0] |= 0b01000000;
 80012b4:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <Render+0xf0>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <Render+0xf0>)
 80012c0:	701a      	strb	r2, [r3, #0]
			break;
 80012c2:	e01a      	b.n	80012fa <Render+0xba>
		}
		default:
		{
			cubeLayerBytes[0] = cubeBytes[i][12] & 0b00111111;
 80012c4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80012c8:	491a      	ldr	r1, [pc, #104]	; (8001334 <Render+0xf4>)
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	330c      	adds	r3, #12
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	4b13      	ldr	r3, [pc, #76]	; (8001330 <Render+0xf0>)
 80012e2:	701a      	strb	r2, [r3, #0]
			cubeLayerBytes[1] = (1 << (7 -i));
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	f1c3 0307 	rsb	r3, r3, #7
 80012ec:	2201      	movs	r2, #1
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <Render+0xf0>)
 80012f6:	705a      	strb	r2, [r3, #1]
			break;
 80012f8:	bf00      	nop
		}
	}
	// ------------------------------------------------------------------------------------------
	// ------------------------------------------------------------------------------------------
	HAL_SPI_Transmit(&hspi1, (uint8_t *)cubeBytes[i], 12, 100);
 80012fa:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80012fe:	4613      	mov	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <Render+0xf4>)
 800130a:	1899      	adds	r1, r3, r2
 800130c:	2364      	movs	r3, #100	; 0x64
 800130e:	220c      	movs	r2, #12
 8001310:	4809      	ldr	r0, [pc, #36]	; (8001338 <Render+0xf8>)
 8001312:	f001 fbad 	bl	8002a70 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)cubeLayerBytes, 2, 100);
 8001316:	2364      	movs	r3, #100	; 0x64
 8001318:	2202      	movs	r2, #2
 800131a:	4905      	ldr	r1, [pc, #20]	; (8001330 <Render+0xf0>)
 800131c:	4806      	ldr	r0, [pc, #24]	; (8001338 <Render+0xf8>)
 800131e:	f001 fba7 	bl	8002a70 <HAL_SPI_Transmit>
	Ping_Latch();
 8001322:	f7ff fbdd 	bl	8000ae0 <Ping_Latch>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000234 	.word	0x20000234
 8001334:	2000012c 	.word	0x2000012c
 8001338:	2000008c 	.word	0x2000008c

0800133c <Redraw>:

void Redraw()
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
	byte plusZZ = 1;
 8001342:	2301      	movs	r3, #1
 8001344:	74fb      	strb	r3, [r7, #19]
	byte upDown = 1;
 8001346:	2301      	movs	r3, #1
 8001348:	74bb      	strb	r3, [r7, #18]
	double radius = 1.5;
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	4b33      	ldr	r3, [pc, #204]	; (800141c <Redraw+0xe0>)
 8001350:	e9c7 2302 	strd	r2, r3, [r7, #8]

	//Point2d center = {5.5, 5.5};
	Point3 lefttopZ;
	byte step = 1;
 8001354:	2301      	movs	r3, #1
 8001356:	75fb      	strb	r3, [r7, #23]
	byte cubeSize = 9;
 8001358:	2309      	movs	r3, #9
 800135a:	75bb      	strb	r3, [r7, #22]
	byte cubeStep = -2;
 800135c:	23fe      	movs	r3, #254	; 0xfe
 800135e:	757b      	strb	r3, [r7, #21]
	byte i = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	753b      	strb	r3, [r7, #20]
	for(;;)
	{
	ClearCubeBytes();
 8001364:	2282      	movs	r2, #130	; 0x82
 8001366:	2100      	movs	r1, #0
 8001368:	482d      	ldr	r0, [pc, #180]	; (8001420 <Redraw+0xe4>)
 800136a:	f002 f97f 	bl	800366c <memset>
	//Draw3DLine(corner4, corner8, 1);
	//Draw3DLine(corner2, corner6, 1);
	//Draw3DLine(corner3, corner7, 1);
	//Draw3DLine(corner1, corner5, 1);

	lefttopZ = (Point3){i, i, i};
 800136e:	7d3b      	ldrb	r3, [r7, #20]
 8001370:	713b      	strb	r3, [r7, #4]
 8001372:	7d3b      	ldrb	r3, [r7, #20]
 8001374:	717b      	strb	r3, [r7, #5]
 8001376:	7d3b      	ldrb	r3, [r7, #20]
 8001378:	71bb      	strb	r3, [r7, #6]
	DrawCube(lefttopZ, cubeSize);
 800137a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800137e:	4619      	mov	r1, r3
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff3d 	bl	8001200 <DrawCube>

	if(i + step == 5)
 8001386:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800138a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800138e:	4413      	add	r3, r2
 8001390:	2b05      	cmp	r3, #5
 8001392:	d103      	bne.n	800139c <Redraw+0x60>
	{
		cubeStep = 2;
 8001394:	2302      	movs	r3, #2
 8001396:	757b      	strb	r3, [r7, #21]
		step = -1;
 8001398:	23ff      	movs	r3, #255	; 0xff
 800139a:	75fb      	strb	r3, [r7, #23]
	}
	if(i == 0)
 800139c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d103      	bne.n	80013ac <Redraw+0x70>
	{

		cubeStep = -2;
 80013a4:	23fe      	movs	r3, #254	; 0xfe
 80013a6:	757b      	strb	r3, [r7, #21]
		step = 1;
 80013a8:	2301      	movs	r3, #1
 80013aa:	75fb      	strb	r3, [r7, #23]
	}

	i+=step;
 80013ac:	7d3a      	ldrb	r2, [r7, #20]
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
 80013b0:	4413      	add	r3, r2
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	753b      	strb	r3, [r7, #20]
	cubeSize += cubeStep;
 80013b6:	7dba      	ldrb	r2, [r7, #22]
 80013b8:	7d7b      	ldrb	r3, [r7, #21]
 80013ba:	4413      	add	r3, r2
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	75bb      	strb	r3, [r7, #22]
	//	{
			//DrawCircle(center, radius + upDown, 5, 1);
	//	}
	//}

	ApplyBufferToRender();
 80013c0:	4a18      	ldr	r2, [pc, #96]	; (8001424 <Redraw+0xe8>)
 80013c2:	4b17      	ldr	r3, [pc, #92]	; (8001420 <Redraw+0xe4>)
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	2382      	movs	r3, #130	; 0x82
 80013ca:	461a      	mov	r2, r3
 80013cc:	f002 f940 	bl	8003650 <memcpy>
	if(radius + (float)upDown >= 4)
 80013d0:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f9df 	bl	8000798 <__aeabi_i2f>
 80013da:	4603      	mov	r3, r0
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f819 	bl	8000414 <__aeabi_f2d>
 80013e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013e6:	f7fe feb7 	bl	8000158 <__adddf3>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <Redraw+0xec>)
 80013f8:	f7ff f8d8 	bl	80005ac <__aeabi_dcmpge>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <Redraw+0xca>
	{
		plusZZ = -1;
 8001402:	23ff      	movs	r3, #255	; 0xff
 8001404:	74fb      	strb	r3, [r7, #19]
	}
	if(upDown <= 0)
 8001406:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800140a:	2b00      	cmp	r3, #0
 800140c:	dc01      	bgt.n	8001412 <Redraw+0xd6>
	{
		plusZZ = 1;
 800140e:	2301      	movs	r3, #1
 8001410:	74fb      	strb	r3, [r7, #19]
	}
	//upDown += plusZZ;
	//osDelay(200);
	HAL_Delay(150);
 8001412:	2096      	movs	r0, #150	; 0x96
 8001414:	f000 fbda 	bl	8001bcc <HAL_Delay>
	{
 8001418:	e7a4      	b.n	8001364 <Redraw+0x28>
 800141a:	bf00      	nop
 800141c:	3ff80000 	.word	0x3ff80000
 8001420:	200001b0 	.word	0x200001b0
 8001424:	2000012c 	.word	0x2000012c
 8001428:	40100000 	.word	0x40100000

0800142c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001430:	f000 fb9a 	bl	8001b68 <HAL_Init>

  /* USER CODE BEGIN Init */
  srand(time(NULL));
 8001434:	2000      	movs	r0, #0
 8001436:	f002 f94f 	bl	80036d8 <time>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4613      	mov	r3, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f002 f91b 	bl	800367c <srand>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001446:	f000 f81d 	bl	8001484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144a:	f000 f8e3 	bl	8001614 <MX_GPIO_Init>
  MX_SPI1_Init();
 800144e:	f000 f85f 	bl	8001510 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001452:	f000 f893 	bl	800157c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  srand(time(NULL));
 8001456:	2000      	movs	r0, #0
 8001458:	f002 f93e 	bl	80036d8 <time>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4613      	mov	r3, r2
 8001462:	4618      	mov	r0, r3
 8001464:	f002 f90a 	bl	800367c <srand>
  timerTicks = 0;
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <main+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim2);
 800146e:	4804      	ldr	r0, [pc, #16]	; (8001480 <main+0x54>)
 8001470:	f001 fd30 	bl	8002ed4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		Redraw();
 8001474:	f7ff ff62 	bl	800133c <Redraw>
 8001478:	e7fc      	b.n	8001474 <main+0x48>
 800147a:	bf00      	nop
 800147c:	20000236 	.word	0x20000236
 8001480:	200000e4 	.word	0x200000e4

08001484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b090      	sub	sp, #64	; 0x40
 8001488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148a:	f107 0318 	add.w	r3, r7, #24
 800148e:	2228      	movs	r2, #40	; 0x28
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f002 f8ea 	bl	800366c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014a6:	2301      	movs	r3, #1
 80014a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b4:	2301      	movs	r3, #1
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b8:	2302      	movs	r3, #2
 80014ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c8:	f107 0318 	add.w	r3, r7, #24
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 fe15 	bl	80020fc <HAL_RCC_OscConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80014d8:	f000 f91e 	bl	8001718 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014dc:	230f      	movs	r3, #15
 80014de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e0:	2302      	movs	r3, #2
 80014e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2102      	movs	r1, #2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f001 f882 	bl	8002600 <HAL_RCC_ClockConfig>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001502:	f000 f909 	bl	8001718 <Error_Handler>
  }
}
 8001506:	bf00      	nop
 8001508:	3740      	adds	r7, #64	; 0x40
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <MX_SPI1_Init+0x64>)
 8001516:	4a18      	ldr	r2, [pc, #96]	; (8001578 <MX_SPI1_Init+0x68>)
 8001518:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <MX_SPI1_Init+0x64>)
 800151c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001520:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_SPI1_Init+0x64>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <MX_SPI1_Init+0x64>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_SPI1_Init+0x64>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_SPI1_Init+0x64>)
 8001536:	2200      	movs	r2, #0
 8001538:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_SPI1_Init+0x64>)
 800153c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001540:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_SPI1_Init+0x64>)
 8001544:	2210      	movs	r2, #16
 8001546:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001548:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <MX_SPI1_Init+0x64>)
 800154a:	2280      	movs	r2, #128	; 0x80
 800154c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_SPI1_Init+0x64>)
 8001550:	2200      	movs	r2, #0
 8001552:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001554:	4b07      	ldr	r3, [pc, #28]	; (8001574 <MX_SPI1_Init+0x64>)
 8001556:	2200      	movs	r2, #0
 8001558:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_SPI1_Init+0x64>)
 800155c:	220a      	movs	r2, #10
 800155e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <MX_SPI1_Init+0x64>)
 8001562:	f001 fa01 	bl	8002968 <HAL_SPI_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800156c:	f000 f8d4 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	2000008c 	.word	0x2000008c
 8001578:	40013000 	.word	0x40013000

0800157c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001582:	f107 0308 	add.w	r3, r7, #8
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001590:	463b      	mov	r3, r7
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <MX_TIM2_Init+0x94>)
 800159a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800159e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80015a0:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <MX_TIM2_Init+0x94>)
 80015a2:	2247      	movs	r2, #71	; 0x47
 80015a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a6:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <MX_TIM2_Init+0x94>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1500;
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <MX_TIM2_Init+0x94>)
 80015ae:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80015b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b4:	4b16      	ldr	r3, [pc, #88]	; (8001610 <MX_TIM2_Init+0x94>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <MX_TIM2_Init+0x94>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015c0:	4813      	ldr	r0, [pc, #76]	; (8001610 <MX_TIM2_Init+0x94>)
 80015c2:	f001 fc37 	bl	8002e34 <HAL_TIM_Base_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015cc:	f000 f8a4 	bl	8001718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	4619      	mov	r1, r3
 80015dc:	480c      	ldr	r0, [pc, #48]	; (8001610 <MX_TIM2_Init+0x94>)
 80015de:	f001 fdcd 	bl	800317c <HAL_TIM_ConfigClockSource>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015e8:	f000 f896 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015f4:	463b      	mov	r3, r7
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_TIM2_Init+0x94>)
 80015fa:	f001 ff95 	bl	8003528 <HAL_TIMEx_MasterConfigSynchronization>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001604:	f000 f888 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200000e4 	.word	0x200000e4

08001614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001628:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <MX_GPIO_Init+0xa4>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a22      	ldr	r2, [pc, #136]	; (80016b8 <MX_GPIO_Init+0xa4>)
 800162e:	f043 0320 	orr.w	r3, r3, #32
 8001632:	6193      	str	r3, [r2, #24]
 8001634:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <MX_GPIO_Init+0xa4>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0320 	and.w	r3, r3, #32
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001640:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <MX_GPIO_Init+0xa4>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a1c      	ldr	r2, [pc, #112]	; (80016b8 <MX_GPIO_Init+0xa4>)
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <MX_GPIO_Init+0xa4>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <MX_GPIO_Init+0xa4>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a16      	ldr	r2, [pc, #88]	; (80016b8 <MX_GPIO_Init+0xa4>)
 800165e:	f043 0308 	orr.w	r3, r3, #8
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <MX_GPIO_Init+0xa4>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	2110      	movs	r1, #16
 8001674:	4811      	ldr	r0, [pc, #68]	; (80016bc <MX_GPIO_Init+0xa8>)
 8001676:	f000 fd29 	bl	80020cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800167a:	2310      	movs	r3, #16
 800167c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167e:	2301      	movs	r3, #1
 8001680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2302      	movs	r3, #2
 8001688:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168a:	f107 0310 	add.w	r3, r7, #16
 800168e:	4619      	mov	r1, r3
 8001690:	480a      	ldr	r0, [pc, #40]	; (80016bc <MX_GPIO_Init+0xa8>)
 8001692:	f000 fb9f 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Controll_Button_Pin */
  GPIO_InitStruct.Pin = Controll_Button_Pin;
 8001696:	2340      	movs	r3, #64	; 0x40
 8001698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800169e:	2302      	movs	r3, #2
 80016a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Controll_Button_GPIO_Port, &GPIO_InitStruct);
 80016a2:	f107 0310 	add.w	r3, r7, #16
 80016a6:	4619      	mov	r1, r3
 80016a8:	4804      	ldr	r0, [pc, #16]	; (80016bc <MX_GPIO_Init+0xa8>)
 80016aa:	f000 fb93 	bl	8001dd4 <HAL_GPIO_Init>

}
 80016ae:	bf00      	nop
 80016b0:	3720      	adds	r7, #32
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40010c00 	.word	0x40010c00

080016c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
		if (htim->Instance == TIM2) {
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d0:	d113      	bne.n	80016fa <HAL_TIM_PeriodElapsedCallback+0x3a>

			//DWT_Delay_us(500);
			Render(timerTicks++);
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80016d4:	f993 2000 	ldrsb.w	r2, [r3]
 80016d8:	b2d3      	uxtb	r3, r2
 80016da:	3301      	adds	r3, #1
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	b259      	sxtb	r1, r3
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80016e2:	7019      	strb	r1, [r3, #0]
 80016e4:	4610      	mov	r0, r2
 80016e6:	f7ff fdab 	bl	8001240 <Render>
			if(timerTicks == 10)
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80016ec:	f993 3000 	ldrsb.w	r3, [r3]
 80016f0:	2b0a      	cmp	r3, #10
 80016f2:	d102      	bne.n	80016fa <HAL_TIM_PeriodElapsedCallback+0x3a>
				timerTicks = 0;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
		  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a05      	ldr	r2, [pc, #20]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d101      	bne.n	8001708 <HAL_TIM_PeriodElapsedCallback+0x48>
    HAL_IncTick();
 8001704:	f000 fa46 	bl	8001b94 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */

		if (htim->Instance == TIM3) {
		  }
  /* USER CODE END Callback 1 */
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000236 	.word	0x20000236
 8001714:	40012c00 	.word	0x40012c00

08001718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800171c:	b672      	cpsid	i
}
 800171e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001720:	e7fe      	b.n	8001720 <Error_Handler+0x8>
	...

08001724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_MspInit+0x5c>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	4a14      	ldr	r2, [pc, #80]	; (8001780 <HAL_MspInit+0x5c>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6193      	str	r3, [r2, #24]
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_MspInit+0x5c>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <HAL_MspInit+0x5c>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <HAL_MspInit+0x5c>)
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800174c:	61d3      	str	r3, [r2, #28]
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <HAL_MspInit+0x5c>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <HAL_MspInit+0x60>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	4a04      	ldr	r2, [pc, #16]	; (8001784 <HAL_MspInit+0x60>)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	40021000 	.word	0x40021000
 8001784:	40010000 	.word	0x40010000

08001788 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a1c      	ldr	r2, [pc, #112]	; (8001814 <HAL_SPI_MspInit+0x8c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d131      	bne.n	800180c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <HAL_SPI_MspInit+0x90>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	4a1a      	ldr	r2, [pc, #104]	; (8001818 <HAL_SPI_MspInit+0x90>)
 80017ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017b2:	6193      	str	r3, [r2, #24]
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <HAL_SPI_MspInit+0x90>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_SPI_MspInit+0x90>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a14      	ldr	r2, [pc, #80]	; (8001818 <HAL_SPI_MspInit+0x90>)
 80017c6:	f043 0308 	orr.w	r3, r3, #8
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_SPI_MspInit+0x90>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80017d8:	2328      	movs	r3, #40	; 0x28
 80017da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	480c      	ldr	r0, [pc, #48]	; (800181c <HAL_SPI_MspInit+0x94>)
 80017ec:	f000 faf2 	bl	8001dd4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_SPI_MspInit+0x98>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
 8001806:	4a06      	ldr	r2, [pc, #24]	; (8001820 <HAL_SPI_MspInit+0x98>)
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800180c:	bf00      	nop
 800180e:	3728      	adds	r7, #40	; 0x28
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40013000 	.word	0x40013000
 8001818:	40021000 	.word	0x40021000
 800181c:	40010c00 	.word	0x40010c00
 8001820:	40010000 	.word	0x40010000

08001824 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001834:	d113      	bne.n	800185e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HAL_TIM_Base_MspInit+0x44>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <HAL_TIM_Base_MspInit+0x44>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	61d3      	str	r3, [r2, #28]
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_TIM_Base_MspInit+0x44>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	201c      	movs	r0, #28
 8001854:	f000 fa93 	bl	8001d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001858:	201c      	movs	r0, #28
 800185a:	f000 faac 	bl	8001db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000

0800186c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08c      	sub	sp, #48	; 0x30
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800187c:	2200      	movs	r2, #0
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	2019      	movs	r0, #25
 8001882:	f000 fa7c 	bl	8001d7e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001886:	2019      	movs	r0, #25
 8001888:	f000 fa95 	bl	8001db6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800188c:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <HAL_InitTick+0x9c>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4a1d      	ldr	r2, [pc, #116]	; (8001908 <HAL_InitTick+0x9c>)
 8001892:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001896:	6193      	str	r3, [r2, #24]
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <HAL_InitTick+0x9c>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018a4:	f107 0210 	add.w	r2, r7, #16
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f001 f80c 	bl	80028cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80018b4:	f000 fff6 	bl	80028a4 <HAL_RCC_GetPCLK2Freq>
 80018b8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018bc:	4a13      	ldr	r2, [pc, #76]	; (800190c <HAL_InitTick+0xa0>)
 80018be:	fba2 2303 	umull	r2, r3, r2, r3
 80018c2:	0c9b      	lsrs	r3, r3, #18
 80018c4:	3b01      	subs	r3, #1
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_InitTick+0xa4>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <HAL_InitTick+0xa8>)
 80018cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_InitTick+0xa4>)
 80018d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018d4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80018d6:	4a0e      	ldr	r2, [pc, #56]	; (8001910 <HAL_InitTick+0xa4>)
 80018d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018da:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <HAL_InitTick+0xa4>)
 80018de:	2200      	movs	r2, #0
 80018e0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_InitTick+0xa4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80018e8:	4809      	ldr	r0, [pc, #36]	; (8001910 <HAL_InitTick+0xa4>)
 80018ea:	f001 faa3 	bl	8002e34 <HAL_TIM_Base_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d104      	bne.n	80018fe <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80018f4:	4806      	ldr	r0, [pc, #24]	; (8001910 <HAL_InitTick+0xa4>)
 80018f6:	f001 faed 	bl	8002ed4 <HAL_TIM_Base_Start_IT>
 80018fa:	4603      	mov	r3, r0
 80018fc:	e000      	b.n	8001900 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
}
 8001900:	4618      	mov	r0, r3
 8001902:	3730      	adds	r7, #48	; 0x30
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40021000 	.word	0x40021000
 800190c:	431bde83 	.word	0x431bde83
 8001910:	20000238 	.word	0x20000238
 8001914:	40012c00 	.word	0x40012c00

08001918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800191c:	e7fe      	b.n	800191c <NMI_Handler+0x4>

0800191e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <HardFault_Handler+0x4>

08001924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <MemManage_Handler+0x4>

0800192a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <BusFault_Handler+0x4>

08001930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <UsageFault_Handler+0x4>

08001936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr

08001942 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr

0800194e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
	...

08001968 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <TIM1_UP_IRQHandler+0x10>)
 800196e:	f001 fafd 	bl	8002f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000238 	.word	0x20000238

0800197c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <TIM2_IRQHandler+0x10>)
 8001982:	f001 faf3 	bl	8002f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200000e4 	.word	0x200000e4

08001990 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
	return 1;
 8001994:	2301      	movs	r3, #1
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <_kill>:

int _kill(int pid, int sig)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019a8:	f001 fe28 	bl	80035fc <__errno>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2216      	movs	r2, #22
 80019b0:	601a      	str	r2, [r3, #0]
	return -1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <_exit>:

void _exit (int status)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019c6:	f04f 31ff 	mov.w	r1, #4294967295
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ffe7 	bl	800199e <_kill>
	while (1) {}		/* Make sure we hang here */
 80019d0:	e7fe      	b.n	80019d0 <_exit+0x12>

080019d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	e00a      	b.n	80019fa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019e4:	f3af 8000 	nop.w
 80019e8:	4601      	mov	r1, r0
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	60ba      	str	r2, [r7, #8]
 80019f0:	b2ca      	uxtb	r2, r1
 80019f2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3301      	adds	r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	dbf0      	blt.n	80019e4 <_read+0x12>
	}

return len;
 8001a02:	687b      	ldr	r3, [r7, #4]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	e009      	b.n	8001a32 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	60ba      	str	r2, [r7, #8]
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	dbf1      	blt.n	8001a1e <_write+0x12>
	}
	return len;
 8001a3a:	687b      	ldr	r3, [r7, #4]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <_close>:

int _close(int file)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	return -1;
 8001a4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr

08001a5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a6a:	605a      	str	r2, [r3, #4]
	return 0;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <_isatty>:

int _isatty(int file)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	return 1;
 8001a80:	2301      	movs	r3, #1
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
	return 0;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aac:	4a14      	ldr	r2, [pc, #80]	; (8001b00 <_sbrk+0x5c>)
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <_sbrk+0x60>)
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d102      	bne.n	8001ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <_sbrk+0x64>)
 8001ac2:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <_sbrk+0x68>)
 8001ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <_sbrk+0x64>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d207      	bcs.n	8001ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad4:	f001 fd92 	bl	80035fc <__errno>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	220c      	movs	r2, #12
 8001adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae2:	e009      	b.n	8001af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <_sbrk+0x64>)
 8001af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001af6:	68fb      	ldr	r3, [r7, #12]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20002800 	.word	0x20002800
 8001b04:	00000400 	.word	0x00000400
 8001b08:	20000280 	.word	0x20000280
 8001b0c:	20000298 	.word	0x20000298

08001b10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b1c:	480c      	ldr	r0, [pc, #48]	; (8001b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b1e:	490d      	ldr	r1, [pc, #52]	; (8001b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b20:	4a0d      	ldr	r2, [pc, #52]	; (8001b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b24:	e002      	b.n	8001b2c <LoopCopyDataInit>

08001b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2a:	3304      	adds	r3, #4

08001b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b30:	d3f9      	bcc.n	8001b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b32:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b34:	4c0a      	ldr	r4, [pc, #40]	; (8001b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b38:	e001      	b.n	8001b3e <LoopFillZerobss>

08001b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b3c:	3204      	adds	r2, #4

08001b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b40:	d3fb      	bcc.n	8001b3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b42:	f7ff ffe5 	bl	8001b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b46:	f001 fd5f 	bl	8003608 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b4a:	f7ff fc6f 	bl	800142c <main>
  bx lr
 8001b4e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b54:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b58:	08004960 	.word	0x08004960
  ldr r2, =_sbss
 8001b5c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b60:	20000298 	.word	0x20000298

08001b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <ADC1_2_IRQHandler>
	...

08001b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HAL_Init+0x28>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <HAL_Init+0x28>)
 8001b72:	f043 0310 	orr.w	r3, r3, #16
 8001b76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b78:	2003      	movs	r0, #3
 8001b7a:	f000 f8f5 	bl	8001d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f7ff fe74 	bl	800186c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b84:	f7ff fdce 	bl	8001724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40022000 	.word	0x40022000

08001b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <HAL_IncTick+0x1c>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_IncTick+0x20>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a03      	ldr	r2, [pc, #12]	; (8001bb4 <HAL_IncTick+0x20>)
 8001ba6:	6013      	str	r3, [r2, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr
 8001bb0:	20000008 	.word	0x20000008
 8001bb4:	20000284 	.word	0x20000284

08001bb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return uwTick;
 8001bbc:	4b02      	ldr	r3, [pc, #8]	; (8001bc8 <HAL_GetTick+0x10>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	20000284 	.word	0x20000284

08001bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd4:	f7ff fff0 	bl	8001bb8 <HAL_GetTick>
 8001bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be4:	d005      	beq.n	8001bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_Delay+0x44>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4413      	add	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bf2:	bf00      	nop
 8001bf4:	f7ff ffe0 	bl	8001bb8 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d8f7      	bhi.n	8001bf4 <HAL_Delay+0x28>
  {
  }
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000008 	.word	0x20000008

08001c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c30:	4013      	ands	r3, r2
 8001c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c46:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	60d3      	str	r3, [r2, #12]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <__NVIC_GetPriorityGrouping+0x18>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	0a1b      	lsrs	r3, r3, #8
 8001c66:	f003 0307 	and.w	r3, r3, #7
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	db0b      	blt.n	8001ca2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	f003 021f 	and.w	r2, r3, #31
 8001c90:	4906      	ldr	r1, [pc, #24]	; (8001cac <__NVIC_EnableIRQ+0x34>)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	095b      	lsrs	r3, r3, #5
 8001c98:	2001      	movs	r0, #1
 8001c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	e000e100 	.word	0xe000e100

08001cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	6039      	str	r1, [r7, #0]
 8001cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	db0a      	blt.n	8001cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	490c      	ldr	r1, [pc, #48]	; (8001cfc <__NVIC_SetPriority+0x4c>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	0112      	lsls	r2, r2, #4
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd8:	e00a      	b.n	8001cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4908      	ldr	r1, [pc, #32]	; (8001d00 <__NVIC_SetPriority+0x50>)
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	3b04      	subs	r3, #4
 8001ce8:	0112      	lsls	r2, r2, #4
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	440b      	add	r3, r1
 8001cee:	761a      	strb	r2, [r3, #24]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000e100 	.word	0xe000e100
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f1c3 0307 	rsb	r3, r3, #7
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	bf28      	it	cs
 8001d22:	2304      	movcs	r3, #4
 8001d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d902      	bls.n	8001d34 <NVIC_EncodePriority+0x30>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3b03      	subs	r3, #3
 8001d32:	e000      	b.n	8001d36 <NVIC_EncodePriority+0x32>
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43da      	mvns	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	401a      	ands	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	43d9      	mvns	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	4313      	orrs	r3, r2
         );
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3724      	adds	r7, #36	; 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ff4f 	bl	8001c14 <__NVIC_SetPriorityGrouping>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d90:	f7ff ff64 	bl	8001c5c <__NVIC_GetPriorityGrouping>
 8001d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	6978      	ldr	r0, [r7, #20]
 8001d9c:	f7ff ffb2 	bl	8001d04 <NVIC_EncodePriority>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff81 	bl	8001cb0 <__NVIC_SetPriority>
}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff57 	bl	8001c78 <__NVIC_EnableIRQ>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b08b      	sub	sp, #44	; 0x2c
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001de2:	2300      	movs	r3, #0
 8001de4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de6:	e161      	b.n	80020ac <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001de8:	2201      	movs	r2, #1
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	f040 8150 	bne.w	80020a6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4a97      	ldr	r2, [pc, #604]	; (8002068 <HAL_GPIO_Init+0x294>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d05e      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e10:	4a95      	ldr	r2, [pc, #596]	; (8002068 <HAL_GPIO_Init+0x294>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d875      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e16:	4a95      	ldr	r2, [pc, #596]	; (800206c <HAL_GPIO_Init+0x298>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d058      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e1c:	4a93      	ldr	r2, [pc, #588]	; (800206c <HAL_GPIO_Init+0x298>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d86f      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e22:	4a93      	ldr	r2, [pc, #588]	; (8002070 <HAL_GPIO_Init+0x29c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d052      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e28:	4a91      	ldr	r2, [pc, #580]	; (8002070 <HAL_GPIO_Init+0x29c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d869      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e2e:	4a91      	ldr	r2, [pc, #580]	; (8002074 <HAL_GPIO_Init+0x2a0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d04c      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e34:	4a8f      	ldr	r2, [pc, #572]	; (8002074 <HAL_GPIO_Init+0x2a0>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d863      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e3a:	4a8f      	ldr	r2, [pc, #572]	; (8002078 <HAL_GPIO_Init+0x2a4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d046      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e40:	4a8d      	ldr	r2, [pc, #564]	; (8002078 <HAL_GPIO_Init+0x2a4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d85d      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e46:	2b12      	cmp	r3, #18
 8001e48:	d82a      	bhi.n	8001ea0 <HAL_GPIO_Init+0xcc>
 8001e4a:	2b12      	cmp	r3, #18
 8001e4c:	d859      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e4e:	a201      	add	r2, pc, #4	; (adr r2, 8001e54 <HAL_GPIO_Init+0x80>)
 8001e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e54:	08001ecf 	.word	0x08001ecf
 8001e58:	08001ea9 	.word	0x08001ea9
 8001e5c:	08001ebb 	.word	0x08001ebb
 8001e60:	08001efd 	.word	0x08001efd
 8001e64:	08001f03 	.word	0x08001f03
 8001e68:	08001f03 	.word	0x08001f03
 8001e6c:	08001f03 	.word	0x08001f03
 8001e70:	08001f03 	.word	0x08001f03
 8001e74:	08001f03 	.word	0x08001f03
 8001e78:	08001f03 	.word	0x08001f03
 8001e7c:	08001f03 	.word	0x08001f03
 8001e80:	08001f03 	.word	0x08001f03
 8001e84:	08001f03 	.word	0x08001f03
 8001e88:	08001f03 	.word	0x08001f03
 8001e8c:	08001f03 	.word	0x08001f03
 8001e90:	08001f03 	.word	0x08001f03
 8001e94:	08001f03 	.word	0x08001f03
 8001e98:	08001eb1 	.word	0x08001eb1
 8001e9c:	08001ec5 	.word	0x08001ec5
 8001ea0:	4a76      	ldr	r2, [pc, #472]	; (800207c <HAL_GPIO_Init+0x2a8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d013      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ea6:	e02c      	b.n	8001f02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	623b      	str	r3, [r7, #32]
          break;
 8001eae:	e029      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	623b      	str	r3, [r7, #32]
          break;
 8001eb8:	e024      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	3308      	adds	r3, #8
 8001ec0:	623b      	str	r3, [r7, #32]
          break;
 8001ec2:	e01f      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	330c      	adds	r3, #12
 8001eca:	623b      	str	r3, [r7, #32]
          break;
 8001ecc:	e01a      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d102      	bne.n	8001edc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	623b      	str	r3, [r7, #32]
          break;
 8001eda:	e013      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d105      	bne.n	8001ef0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee4:	2308      	movs	r3, #8
 8001ee6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	611a      	str	r2, [r3, #16]
          break;
 8001eee:	e009      	b.n	8001f04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef0:	2308      	movs	r3, #8
 8001ef2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	615a      	str	r2, [r3, #20]
          break;
 8001efa:	e003      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001efc:	2300      	movs	r3, #0
 8001efe:	623b      	str	r3, [r7, #32]
          break;
 8001f00:	e000      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          break;
 8001f02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2bff      	cmp	r3, #255	; 0xff
 8001f08:	d801      	bhi.n	8001f0e <HAL_GPIO_Init+0x13a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	e001      	b.n	8001f12 <HAL_GPIO_Init+0x13e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3304      	adds	r3, #4
 8001f12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2bff      	cmp	r3, #255	; 0xff
 8001f18:	d802      	bhi.n	8001f20 <HAL_GPIO_Init+0x14c>
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	e002      	b.n	8001f26 <HAL_GPIO_Init+0x152>
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	3b08      	subs	r3, #8
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	210f      	movs	r1, #15
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	fa01 f303 	lsl.w	r3, r1, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	401a      	ands	r2, r3
 8001f38:	6a39      	ldr	r1, [r7, #32]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f40:	431a      	orrs	r2, r3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 80a9 	beq.w	80020a6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f54:	4b4a      	ldr	r3, [pc, #296]	; (8002080 <HAL_GPIO_Init+0x2ac>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a49      	ldr	r2, [pc, #292]	; (8002080 <HAL_GPIO_Init+0x2ac>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	4b47      	ldr	r3, [pc, #284]	; (8002080 <HAL_GPIO_Init+0x2ac>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f6c:	4a45      	ldr	r2, [pc, #276]	; (8002084 <HAL_GPIO_Init+0x2b0>)
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	089b      	lsrs	r3, r3, #2
 8001f72:	3302      	adds	r3, #2
 8001f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	220f      	movs	r2, #15
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a3d      	ldr	r2, [pc, #244]	; (8002088 <HAL_GPIO_Init+0x2b4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d00d      	beq.n	8001fb4 <HAL_GPIO_Init+0x1e0>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a3c      	ldr	r2, [pc, #240]	; (800208c <HAL_GPIO_Init+0x2b8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d007      	beq.n	8001fb0 <HAL_GPIO_Init+0x1dc>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a3b      	ldr	r2, [pc, #236]	; (8002090 <HAL_GPIO_Init+0x2bc>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d101      	bne.n	8001fac <HAL_GPIO_Init+0x1d8>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e004      	b.n	8001fb6 <HAL_GPIO_Init+0x1e2>
 8001fac:	2303      	movs	r3, #3
 8001fae:	e002      	b.n	8001fb6 <HAL_GPIO_Init+0x1e2>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <HAL_GPIO_Init+0x1e2>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb8:	f002 0203 	and.w	r2, r2, #3
 8001fbc:	0092      	lsls	r2, r2, #2
 8001fbe:	4093      	lsls	r3, r2
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fc6:	492f      	ldr	r1, [pc, #188]	; (8002084 <HAL_GPIO_Init+0x2b0>)
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	089b      	lsrs	r3, r3, #2
 8001fcc:	3302      	adds	r3, #2
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d006      	beq.n	8001fee <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fe0:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <HAL_GPIO_Init+0x2c0>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	492b      	ldr	r1, [pc, #172]	; (8002094 <HAL_GPIO_Init+0x2c0>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	600b      	str	r3, [r1, #0]
 8001fec:	e006      	b.n	8001ffc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fee:	4b29      	ldr	r3, [pc, #164]	; (8002094 <HAL_GPIO_Init+0x2c0>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	4927      	ldr	r1, [pc, #156]	; (8002094 <HAL_GPIO_Init+0x2c0>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d006      	beq.n	8002016 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002008:	4b22      	ldr	r3, [pc, #136]	; (8002094 <HAL_GPIO_Init+0x2c0>)
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	4921      	ldr	r1, [pc, #132]	; (8002094 <HAL_GPIO_Init+0x2c0>)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	604b      	str	r3, [r1, #4]
 8002014:	e006      	b.n	8002024 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002016:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <HAL_GPIO_Init+0x2c0>)
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	43db      	mvns	r3, r3
 800201e:	491d      	ldr	r1, [pc, #116]	; (8002094 <HAL_GPIO_Init+0x2c0>)
 8002020:	4013      	ands	r3, r2
 8002022:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <HAL_GPIO_Init+0x2c0>)
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	4917      	ldr	r1, [pc, #92]	; (8002094 <HAL_GPIO_Init+0x2c0>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	608b      	str	r3, [r1, #8]
 800203c:	e006      	b.n	800204c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <HAL_GPIO_Init+0x2c0>)
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	43db      	mvns	r3, r3
 8002046:	4913      	ldr	r1, [pc, #76]	; (8002094 <HAL_GPIO_Init+0x2c0>)
 8002048:	4013      	ands	r3, r2
 800204a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d01f      	beq.n	8002098 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002058:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <HAL_GPIO_Init+0x2c0>)
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	490d      	ldr	r1, [pc, #52]	; (8002094 <HAL_GPIO_Init+0x2c0>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	60cb      	str	r3, [r1, #12]
 8002064:	e01f      	b.n	80020a6 <HAL_GPIO_Init+0x2d2>
 8002066:	bf00      	nop
 8002068:	10320000 	.word	0x10320000
 800206c:	10310000 	.word	0x10310000
 8002070:	10220000 	.word	0x10220000
 8002074:	10210000 	.word	0x10210000
 8002078:	10120000 	.word	0x10120000
 800207c:	10110000 	.word	0x10110000
 8002080:	40021000 	.word	0x40021000
 8002084:	40010000 	.word	0x40010000
 8002088:	40010800 	.word	0x40010800
 800208c:	40010c00 	.word	0x40010c00
 8002090:	40011000 	.word	0x40011000
 8002094:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_GPIO_Init+0x2f4>)
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	43db      	mvns	r3, r3
 80020a0:	4909      	ldr	r1, [pc, #36]	; (80020c8 <HAL_GPIO_Init+0x2f4>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	3301      	adds	r3, #1
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	fa22 f303 	lsr.w	r3, r2, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f47f ae96 	bne.w	8001de8 <HAL_GPIO_Init+0x14>
  }
}
 80020bc:	bf00      	nop
 80020be:	bf00      	nop
 80020c0:	372c      	adds	r7, #44	; 0x2c
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	40010400 	.word	0x40010400

080020cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	807b      	strh	r3, [r7, #2]
 80020d8:	4613      	mov	r3, r2
 80020da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020dc:	787b      	ldrb	r3, [r7, #1]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020e8:	e003      	b.n	80020f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020ea:	887b      	ldrh	r3, [r7, #2]
 80020ec:	041a      	lsls	r2, r3, #16
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	611a      	str	r2, [r3, #16]
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e272      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 8087 	beq.w	800222a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800211c:	4b92      	ldr	r3, [pc, #584]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 030c 	and.w	r3, r3, #12
 8002124:	2b04      	cmp	r3, #4
 8002126:	d00c      	beq.n	8002142 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002128:	4b8f      	ldr	r3, [pc, #572]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	2b08      	cmp	r3, #8
 8002132:	d112      	bne.n	800215a <HAL_RCC_OscConfig+0x5e>
 8002134:	4b8c      	ldr	r3, [pc, #560]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002140:	d10b      	bne.n	800215a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002142:	4b89      	ldr	r3, [pc, #548]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d06c      	beq.n	8002228 <HAL_RCC_OscConfig+0x12c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d168      	bne.n	8002228 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e24c      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002162:	d106      	bne.n	8002172 <HAL_RCC_OscConfig+0x76>
 8002164:	4b80      	ldr	r3, [pc, #512]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a7f      	ldr	r2, [pc, #508]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 800216a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	e02e      	b.n	80021d0 <HAL_RCC_OscConfig+0xd4>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0x98>
 800217a:	4b7b      	ldr	r3, [pc, #492]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a7a      	ldr	r2, [pc, #488]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	4b78      	ldr	r3, [pc, #480]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a77      	ldr	r2, [pc, #476]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 800218c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	e01d      	b.n	80021d0 <HAL_RCC_OscConfig+0xd4>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800219c:	d10c      	bne.n	80021b8 <HAL_RCC_OscConfig+0xbc>
 800219e:	4b72      	ldr	r3, [pc, #456]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a71      	ldr	r2, [pc, #452]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	4b6f      	ldr	r3, [pc, #444]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a6e      	ldr	r2, [pc, #440]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	e00b      	b.n	80021d0 <HAL_RCC_OscConfig+0xd4>
 80021b8:	4b6b      	ldr	r3, [pc, #428]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a6a      	ldr	r2, [pc, #424]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c2:	6013      	str	r3, [r2, #0]
 80021c4:	4b68      	ldr	r3, [pc, #416]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a67      	ldr	r2, [pc, #412]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d013      	beq.n	8002200 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7ff fcee 	bl	8001bb8 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e0:	f7ff fcea 	bl	8001bb8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b64      	cmp	r3, #100	; 0x64
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e200      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f2:	4b5d      	ldr	r3, [pc, #372]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0xe4>
 80021fe:	e014      	b.n	800222a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7ff fcda 	bl	8001bb8 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002208:	f7ff fcd6 	bl	8001bb8 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b64      	cmp	r3, #100	; 0x64
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e1ec      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221a:	4b53      	ldr	r3, [pc, #332]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x10c>
 8002226:	e000      	b.n	800222a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d063      	beq.n	80022fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002236:	4b4c      	ldr	r3, [pc, #304]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00b      	beq.n	800225a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002242:	4b49      	ldr	r3, [pc, #292]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b08      	cmp	r3, #8
 800224c:	d11c      	bne.n	8002288 <HAL_RCC_OscConfig+0x18c>
 800224e:	4b46      	ldr	r3, [pc, #280]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d116      	bne.n	8002288 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225a:	4b43      	ldr	r3, [pc, #268]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d005      	beq.n	8002272 <HAL_RCC_OscConfig+0x176>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d001      	beq.n	8002272 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e1c0      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002272:	4b3d      	ldr	r3, [pc, #244]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4939      	ldr	r1, [pc, #228]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002282:	4313      	orrs	r3, r2
 8002284:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002286:	e03a      	b.n	80022fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d020      	beq.n	80022d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002290:	4b36      	ldr	r3, [pc, #216]	; (800236c <HAL_RCC_OscConfig+0x270>)
 8002292:	2201      	movs	r2, #1
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7ff fc8f 	bl	8001bb8 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800229e:	f7ff fc8b 	bl	8001bb8 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e1a1      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b0:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f0      	beq.n	800229e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022bc:	4b2a      	ldr	r3, [pc, #168]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4927      	ldr	r1, [pc, #156]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]
 80022d0:	e015      	b.n	80022fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022d2:	4b26      	ldr	r3, [pc, #152]	; (800236c <HAL_RCC_OscConfig+0x270>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7ff fc6e 	bl	8001bb8 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e0:	f7ff fc6a 	bl	8001bb8 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e180      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d03a      	beq.n	8002380 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d019      	beq.n	8002346 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002312:	4b17      	ldr	r3, [pc, #92]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002314:	2201      	movs	r2, #1
 8002316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002318:	f7ff fc4e 	bl	8001bb8 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002320:	f7ff fc4a 	bl	8001bb8 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e160      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800233e:	2001      	movs	r0, #1
 8002340:	f000 faf4 	bl	800292c <RCC_Delay>
 8002344:	e01c      	b.n	8002380 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234c:	f7ff fc34 	bl	8001bb8 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002352:	e00f      	b.n	8002374 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002354:	f7ff fc30 	bl	8001bb8 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d908      	bls.n	8002374 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e146      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
 8002366:	bf00      	nop
 8002368:	40021000 	.word	0x40021000
 800236c:	42420000 	.word	0x42420000
 8002370:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002374:	4b92      	ldr	r3, [pc, #584]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1e9      	bne.n	8002354 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80a6 	beq.w	80024da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800238e:	2300      	movs	r3, #0
 8002390:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002392:	4b8b      	ldr	r3, [pc, #556]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10d      	bne.n	80023ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800239e:	4b88      	ldr	r3, [pc, #544]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	4a87      	ldr	r2, [pc, #540]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a8:	61d3      	str	r3, [r2, #28]
 80023aa:	4b85      	ldr	r3, [pc, #532]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b6:	2301      	movs	r3, #1
 80023b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ba:	4b82      	ldr	r3, [pc, #520]	; (80025c4 <HAL_RCC_OscConfig+0x4c8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d118      	bne.n	80023f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c6:	4b7f      	ldr	r3, [pc, #508]	; (80025c4 <HAL_RCC_OscConfig+0x4c8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a7e      	ldr	r2, [pc, #504]	; (80025c4 <HAL_RCC_OscConfig+0x4c8>)
 80023cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d2:	f7ff fbf1 	bl	8001bb8 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023da:	f7ff fbed 	bl	8001bb8 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b64      	cmp	r3, #100	; 0x64
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e103      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ec:	4b75      	ldr	r3, [pc, #468]	; (80025c4 <HAL_RCC_OscConfig+0x4c8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d106      	bne.n	800240e <HAL_RCC_OscConfig+0x312>
 8002400:	4b6f      	ldr	r3, [pc, #444]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4a6e      	ldr	r2, [pc, #440]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6213      	str	r3, [r2, #32]
 800240c:	e02d      	b.n	800246a <HAL_RCC_OscConfig+0x36e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10c      	bne.n	8002430 <HAL_RCC_OscConfig+0x334>
 8002416:	4b6a      	ldr	r3, [pc, #424]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	4a69      	ldr	r2, [pc, #420]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 800241c:	f023 0301 	bic.w	r3, r3, #1
 8002420:	6213      	str	r3, [r2, #32]
 8002422:	4b67      	ldr	r3, [pc, #412]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4a66      	ldr	r2, [pc, #408]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	f023 0304 	bic.w	r3, r3, #4
 800242c:	6213      	str	r3, [r2, #32]
 800242e:	e01c      	b.n	800246a <HAL_RCC_OscConfig+0x36e>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b05      	cmp	r3, #5
 8002436:	d10c      	bne.n	8002452 <HAL_RCC_OscConfig+0x356>
 8002438:	4b61      	ldr	r3, [pc, #388]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4a60      	ldr	r2, [pc, #384]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 800243e:	f043 0304 	orr.w	r3, r3, #4
 8002442:	6213      	str	r3, [r2, #32]
 8002444:	4b5e      	ldr	r3, [pc, #376]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4a5d      	ldr	r2, [pc, #372]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6213      	str	r3, [r2, #32]
 8002450:	e00b      	b.n	800246a <HAL_RCC_OscConfig+0x36e>
 8002452:	4b5b      	ldr	r3, [pc, #364]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	4a5a      	ldr	r2, [pc, #360]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	6213      	str	r3, [r2, #32]
 800245e:	4b58      	ldr	r3, [pc, #352]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	4a57      	ldr	r2, [pc, #348]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	f023 0304 	bic.w	r3, r3, #4
 8002468:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d015      	beq.n	800249e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002472:	f7ff fba1 	bl	8001bb8 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002478:	e00a      	b.n	8002490 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247a:	f7ff fb9d 	bl	8001bb8 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	f241 3288 	movw	r2, #5000	; 0x1388
 8002488:	4293      	cmp	r3, r2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e0b1      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002490:	4b4b      	ldr	r3, [pc, #300]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0ee      	beq.n	800247a <HAL_RCC_OscConfig+0x37e>
 800249c:	e014      	b.n	80024c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249e:	f7ff fb8b 	bl	8001bb8 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a4:	e00a      	b.n	80024bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a6:	f7ff fb87 	bl	8001bb8 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e09b      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024bc:	4b40      	ldr	r3, [pc, #256]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1ee      	bne.n	80024a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d105      	bne.n	80024da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ce:	4b3c      	ldr	r3, [pc, #240]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	4a3b      	ldr	r2, [pc, #236]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 8087 	beq.w	80025f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024e4:	4b36      	ldr	r3, [pc, #216]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 030c 	and.w	r3, r3, #12
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d061      	beq.n	80025b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d146      	bne.n	8002586 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f8:	4b33      	ldr	r3, [pc, #204]	; (80025c8 <HAL_RCC_OscConfig+0x4cc>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fe:	f7ff fb5b 	bl	8001bb8 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002506:	f7ff fb57 	bl	8001bb8 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e06d      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002518:	4b29      	ldr	r3, [pc, #164]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f0      	bne.n	8002506 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252c:	d108      	bne.n	8002540 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800252e:	4b24      	ldr	r3, [pc, #144]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	4921      	ldr	r1, [pc, #132]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002540:	4b1f      	ldr	r3, [pc, #124]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a19      	ldr	r1, [r3, #32]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	430b      	orrs	r3, r1
 8002552:	491b      	ldr	r1, [pc, #108]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002558:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <HAL_RCC_OscConfig+0x4cc>)
 800255a:	2201      	movs	r2, #1
 800255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7ff fb2b 	bl	8001bb8 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002566:	f7ff fb27 	bl	8001bb8 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e03d      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x46a>
 8002584:	e035      	b.n	80025f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <HAL_RCC_OscConfig+0x4cc>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258c:	f7ff fb14 	bl	8001bb8 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002594:	f7ff fb10 	bl	8001bb8 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e026      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x498>
 80025b2:	e01e      	b.n	80025f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d107      	bne.n	80025cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e019      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40007000 	.word	0x40007000
 80025c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_RCC_OscConfig+0x500>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d106      	bne.n	80025ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d001      	beq.n	80025f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40021000 	.word	0x40021000

08002600 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0d0      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002614:	4b6a      	ldr	r3, [pc, #424]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d910      	bls.n	8002644 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002622:	4b67      	ldr	r3, [pc, #412]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 0207 	bic.w	r2, r3, #7
 800262a:	4965      	ldr	r1, [pc, #404]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	4b63      	ldr	r3, [pc, #396]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0b8      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d020      	beq.n	8002692 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800265c:	4b59      	ldr	r3, [pc, #356]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a58      	ldr	r2, [pc, #352]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002666:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002674:	4b53      	ldr	r3, [pc, #332]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a52      	ldr	r2, [pc, #328]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800267e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002680:	4b50      	ldr	r3, [pc, #320]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	494d      	ldr	r1, [pc, #308]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	4313      	orrs	r3, r2
 8002690:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d040      	beq.n	8002720 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d107      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a6:	4b47      	ldr	r3, [pc, #284]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d115      	bne.n	80026de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e07f      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d107      	bne.n	80026ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026be:	4b41      	ldr	r3, [pc, #260]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d109      	bne.n	80026de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e073      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ce:	4b3d      	ldr	r3, [pc, #244]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e06b      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026de:	4b39      	ldr	r3, [pc, #228]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f023 0203 	bic.w	r2, r3, #3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	4936      	ldr	r1, [pc, #216]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f0:	f7ff fa62 	bl	8001bb8 <HAL_GetTick>
 80026f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f6:	e00a      	b.n	800270e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f8:	f7ff fa5e 	bl	8001bb8 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f241 3288 	movw	r2, #5000	; 0x1388
 8002706:	4293      	cmp	r3, r2
 8002708:	d901      	bls.n	800270e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e053      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270e:	4b2d      	ldr	r3, [pc, #180]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 020c 	and.w	r2, r3, #12
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	429a      	cmp	r2, r3
 800271e:	d1eb      	bne.n	80026f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002720:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d210      	bcs.n	8002750 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272e:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 0207 	bic.w	r2, r3, #7
 8002736:	4922      	ldr	r1, [pc, #136]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273e:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e032      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800275c:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4916      	ldr	r1, [pc, #88]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d009      	beq.n	800278e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800277a:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	490e      	ldr	r1, [pc, #56]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800278e:	f000 f821 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8002792:	4602      	mov	r2, r0
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	490a      	ldr	r1, [pc, #40]	; (80027c8 <HAL_RCC_ClockConfig+0x1c8>)
 80027a0:	5ccb      	ldrb	r3, [r1, r3]
 80027a2:	fa22 f303 	lsr.w	r3, r2, r3
 80027a6:	4a09      	ldr	r2, [pc, #36]	; (80027cc <HAL_RCC_ClockConfig+0x1cc>)
 80027a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <HAL_RCC_ClockConfig+0x1d0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff f85c 	bl	800186c <HAL_InitTick>

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40022000 	.word	0x40022000
 80027c4:	40021000 	.word	0x40021000
 80027c8:	080047f8 	.word	0x080047f8
 80027cc:	20000000 	.word	0x20000000
 80027d0:	20000004 	.word	0x20000004

080027d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d4:	b490      	push	{r4, r7}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027da:	4b29      	ldr	r3, [pc, #164]	; (8002880 <HAL_RCC_GetSysClockFreq+0xac>)
 80027dc:	1d3c      	adds	r4, r7, #4
 80027de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027e4:	f240 2301 	movw	r3, #513	; 0x201
 80027e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
 80027ee:	2300      	movs	r3, #0
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	2300      	movs	r3, #0
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027fe:	4b21      	ldr	r3, [pc, #132]	; (8002884 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b04      	cmp	r3, #4
 800280c:	d002      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x40>
 800280e:	2b08      	cmp	r3, #8
 8002810:	d003      	beq.n	800281a <HAL_RCC_GetSysClockFreq+0x46>
 8002812:	e02b      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002814:	4b1c      	ldr	r3, [pc, #112]	; (8002888 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002816:	623b      	str	r3, [r7, #32]
      break;
 8002818:	e02b      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	0c9b      	lsrs	r3, r3, #18
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	3328      	adds	r3, #40	; 0x28
 8002824:	443b      	add	r3, r7
 8002826:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800282a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d012      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002836:	4b13      	ldr	r3, [pc, #76]	; (8002884 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	0c5b      	lsrs	r3, r3, #17
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	3328      	adds	r3, #40	; 0x28
 8002842:	443b      	add	r3, r7
 8002844:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002848:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	4a0e      	ldr	r2, [pc, #56]	; (8002888 <HAL_RCC_GetSysClockFreq+0xb4>)
 800284e:	fb03 f202 	mul.w	r2, r3, r2
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	fbb2 f3f3 	udiv	r3, r2, r3
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
 800285a:	e004      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	4a0b      	ldr	r2, [pc, #44]	; (800288c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002860:	fb02 f303 	mul.w	r3, r2, r3
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	623b      	str	r3, [r7, #32]
      break;
 800286a:	e002      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <HAL_RCC_GetSysClockFreq+0xb4>)
 800286e:	623b      	str	r3, [r7, #32]
      break;
 8002870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002872:	6a3b      	ldr	r3, [r7, #32]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3728      	adds	r7, #40	; 0x28
 8002878:	46bd      	mov	sp, r7
 800287a:	bc90      	pop	{r4, r7}
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	080047e8 	.word	0x080047e8
 8002884:	40021000 	.word	0x40021000
 8002888:	007a1200 	.word	0x007a1200
 800288c:	003d0900 	.word	0x003d0900

08002890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002894:	4b02      	ldr	r3, [pc, #8]	; (80028a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002896:	681b      	ldr	r3, [r3, #0]
}
 8002898:	4618      	mov	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	20000000 	.word	0x20000000

080028a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028a8:	f7ff fff2 	bl	8002890 <HAL_RCC_GetHCLKFreq>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	0adb      	lsrs	r3, r3, #11
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	4903      	ldr	r1, [pc, #12]	; (80028c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ba:	5ccb      	ldrb	r3, [r1, r3]
 80028bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40021000 	.word	0x40021000
 80028c8:	08004808 	.word	0x08004808

080028cc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	220f      	movs	r2, #15
 80028da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_RCC_GetClockConfig+0x58>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0203 	and.w	r2, r3, #3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028e8:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <HAL_RCC_GetClockConfig+0x58>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_RCC_GetClockConfig+0x58>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002900:	4b08      	ldr	r3, [pc, #32]	; (8002924 <HAL_RCC_GetClockConfig+0x58>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	08db      	lsrs	r3, r3, #3
 8002906:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_RCC_GetClockConfig+0x5c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0207 	and.w	r2, r3, #7
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	40021000 	.word	0x40021000
 8002928:	40022000 	.word	0x40022000

0800292c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <RCC_Delay+0x34>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <RCC_Delay+0x38>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	0a5b      	lsrs	r3, r3, #9
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	fb02 f303 	mul.w	r3, r2, r3
 8002946:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002948:	bf00      	nop
  }
  while (Delay --);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1e5a      	subs	r2, r3, #1
 800294e:	60fa      	str	r2, [r7, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f9      	bne.n	8002948 <RCC_Delay+0x1c>
}
 8002954:	bf00      	nop
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	20000000 	.word	0x20000000
 8002964:	10624dd3 	.word	0x10624dd3

08002968 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e076      	b.n	8002a68 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	2b00      	cmp	r3, #0
 8002980:	d108      	bne.n	8002994 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800298a:	d009      	beq.n	80029a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	61da      	str	r2, [r3, #28]
 8002992:	e005      	b.n	80029a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fe fee4 	bl	8001788 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a24:	ea42 0103 	orr.w	r1, r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	0c1a      	lsrs	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f002 0204 	and.w	r2, r2, #4
 8002a46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	69da      	ldr	r2, [r3, #28]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_SPI_Transmit+0x22>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e126      	b.n	8002ce0 <HAL_SPI_Transmit+0x270>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a9a:	f7ff f88d 	bl	8001bb8 <HAL_GetTick>
 8002a9e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d002      	beq.n	8002ab6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ab4:	e10b      	b.n	8002cce <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <HAL_SPI_Transmit+0x52>
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d102      	bne.n	8002ac8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ac6:	e102      	b.n	8002cce <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2203      	movs	r2, #3
 8002acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	88fa      	ldrh	r2, [r7, #6]
 8002ae0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	88fa      	ldrh	r2, [r7, #6]
 8002ae6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b0e:	d10f      	bne.n	8002b30 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b2e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3a:	2b40      	cmp	r3, #64	; 0x40
 8002b3c:	d007      	beq.n	8002b4e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b56:	d14b      	bne.n	8002bf0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <HAL_SPI_Transmit+0xf6>
 8002b60:	8afb      	ldrh	r3, [r7, #22]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d13e      	bne.n	8002be4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	881a      	ldrh	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	1c9a      	adds	r2, r3, #2
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b8a:	e02b      	b.n	8002be4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d112      	bne.n	8002bc0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	881a      	ldrh	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	1c9a      	adds	r2, r3, #2
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	86da      	strh	r2, [r3, #54]	; 0x36
 8002bbe:	e011      	b.n	8002be4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bc0:	f7fe fffa 	bl	8001bb8 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d803      	bhi.n	8002bd8 <HAL_SPI_Transmit+0x168>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd6:	d102      	bne.n	8002bde <HAL_SPI_Transmit+0x16e>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d102      	bne.n	8002be4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002be2:	e074      	b.n	8002cce <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1ce      	bne.n	8002b8c <HAL_SPI_Transmit+0x11c>
 8002bee:	e04c      	b.n	8002c8a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <HAL_SPI_Transmit+0x18e>
 8002bf8:	8afb      	ldrh	r3, [r7, #22]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d140      	bne.n	8002c80 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	330c      	adds	r3, #12
 8002c08:	7812      	ldrb	r2, [r2, #0]
 8002c0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c24:	e02c      	b.n	8002c80 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d113      	bne.n	8002c5c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	330c      	adds	r3, #12
 8002c3e:	7812      	ldrb	r2, [r2, #0]
 8002c40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c5a:	e011      	b.n	8002c80 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c5c:	f7fe ffac 	bl	8001bb8 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d803      	bhi.n	8002c74 <HAL_SPI_Transmit+0x204>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c72:	d102      	bne.n	8002c7a <HAL_SPI_Transmit+0x20a>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d102      	bne.n	8002c80 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c7e:	e026      	b.n	8002cce <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1cd      	bne.n	8002c26 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	6839      	ldr	r1, [r7, #0]
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f8b2 	bl	8002df8 <SPI_EndRxTxTransaction>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10a      	bne.n	8002cbe <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ca8:	2300      	movs	r3, #0
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	77fb      	strb	r3, [r7, #31]
 8002cca:	e000      	b.n	8002cce <HAL_SPI_Transmit+0x25e>
  }

error:
 8002ccc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cde:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3720      	adds	r7, #32
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002cf8:	f7fe ff5e 	bl	8001bb8 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	4413      	add	r3, r2
 8002d06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d08:	f7fe ff56 	bl	8001bb8 <HAL_GetTick>
 8002d0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d0e:	4b39      	ldr	r3, [pc, #228]	; (8002df4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	015b      	lsls	r3, r3, #5
 8002d14:	0d1b      	lsrs	r3, r3, #20
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	fb02 f303 	mul.w	r3, r2, r3
 8002d1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d1e:	e054      	b.n	8002dca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d26:	d050      	beq.n	8002dca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d28:	f7fe ff46 	bl	8001bb8 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d902      	bls.n	8002d3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d13d      	bne.n	8002dba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d56:	d111      	bne.n	8002d7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d60:	d004      	beq.n	8002d6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d6a:	d107      	bne.n	8002d7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d84:	d10f      	bne.n	8002da6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002da4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e017      	b.n	8002dea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	bf0c      	ite	eq
 8002dda:	2301      	moveq	r3, #1
 8002ddc:	2300      	movne	r3, #0
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d19b      	bne.n	8002d20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3720      	adds	r7, #32
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000000 	.word	0x20000000

08002df8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2180      	movs	r1, #128	; 0x80
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f7ff ff6a 	bl	8002ce8 <SPI_WaitFlagStateUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d007      	beq.n	8002e2a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1e:	f043 0220 	orr.w	r2, r3, #32
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e000      	b.n	8002e2c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e041      	b.n	8002eca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fe fce2 	bl	8001824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	4619      	mov	r1, r3
 8002e72:	4610      	mov	r0, r2
 8002e74:	f000 fa6a 	bl	800334c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d001      	beq.n	8002eec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e035      	b.n	8002f58 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a16      	ldr	r2, [pc, #88]	; (8002f64 <HAL_TIM_Base_Start_IT+0x90>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d009      	beq.n	8002f22 <HAL_TIM_Base_Start_IT+0x4e>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f16:	d004      	beq.n	8002f22 <HAL_TIM_Base_Start_IT+0x4e>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a12      	ldr	r2, [pc, #72]	; (8002f68 <HAL_TIM_Base_Start_IT+0x94>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d111      	bne.n	8002f46 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b06      	cmp	r3, #6
 8002f32:	d010      	beq.n	8002f56 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f44:	e007      	b.n	8002f56 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 0201 	orr.w	r2, r2, #1
 8002f54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40012c00 	.word	0x40012c00
 8002f68:	40000400 	.word	0x40000400

08002f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d122      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d11b      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0202 	mvn.w	r2, #2
 8002f98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f9b1 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 8002fb4:	e005      	b.n	8002fc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f9a4 	bl	8003304 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f9b3 	bl	8003328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d122      	bne.n	800301c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d11b      	bne.n	800301c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0204 	mvn.w	r2, #4
 8002fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f987 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 8003008:	e005      	b.n	8003016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f97a 	bl	8003304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f989 	bl	8003328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b08      	cmp	r3, #8
 8003028:	d122      	bne.n	8003070 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b08      	cmp	r3, #8
 8003036:	d11b      	bne.n	8003070 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0208 	mvn.w	r2, #8
 8003040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2204      	movs	r2, #4
 8003046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f95d 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 800305c:	e005      	b.n	800306a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f950 	bl	8003304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f95f 	bl	8003328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2b10      	cmp	r3, #16
 800307c:	d122      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b10      	cmp	r3, #16
 800308a:	d11b      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0210 	mvn.w	r2, #16
 8003094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2208      	movs	r2, #8
 800309a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f933 	bl	8003316 <HAL_TIM_IC_CaptureCallback>
 80030b0:	e005      	b.n	80030be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f926 	bl	8003304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f935 	bl	8003328 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d10e      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d107      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0201 	mvn.w	r2, #1
 80030e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fe fae8 	bl	80016c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fa:	2b80      	cmp	r3, #128	; 0x80
 80030fc:	d10e      	bne.n	800311c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003108:	2b80      	cmp	r3, #128	; 0x80
 800310a:	d107      	bne.n	800311c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fa67 	bl	80035ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003126:	2b40      	cmp	r3, #64	; 0x40
 8003128:	d10e      	bne.n	8003148 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003134:	2b40      	cmp	r3, #64	; 0x40
 8003136:	d107      	bne.n	8003148 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f8f9 	bl	800333a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b20      	cmp	r3, #32
 8003154:	d10e      	bne.n	8003174 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	2b20      	cmp	r3, #32
 8003162:	d107      	bne.n	8003174 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0220 	mvn.w	r2, #32
 800316c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fa32 	bl	80035d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003174:	bf00      	nop
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_TIM_ConfigClockSource+0x18>
 8003190:	2302      	movs	r3, #2
 8003192:	e0b3      	b.n	80032fc <HAL_TIM_ConfigClockSource+0x180>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031cc:	d03e      	beq.n	800324c <HAL_TIM_ConfigClockSource+0xd0>
 80031ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031d2:	f200 8087 	bhi.w	80032e4 <HAL_TIM_ConfigClockSource+0x168>
 80031d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031da:	f000 8085 	beq.w	80032e8 <HAL_TIM_ConfigClockSource+0x16c>
 80031de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e2:	d87f      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x168>
 80031e4:	2b70      	cmp	r3, #112	; 0x70
 80031e6:	d01a      	beq.n	800321e <HAL_TIM_ConfigClockSource+0xa2>
 80031e8:	2b70      	cmp	r3, #112	; 0x70
 80031ea:	d87b      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x168>
 80031ec:	2b60      	cmp	r3, #96	; 0x60
 80031ee:	d050      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x116>
 80031f0:	2b60      	cmp	r3, #96	; 0x60
 80031f2:	d877      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x168>
 80031f4:	2b50      	cmp	r3, #80	; 0x50
 80031f6:	d03c      	beq.n	8003272 <HAL_TIM_ConfigClockSource+0xf6>
 80031f8:	2b50      	cmp	r3, #80	; 0x50
 80031fa:	d873      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x168>
 80031fc:	2b40      	cmp	r3, #64	; 0x40
 80031fe:	d058      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0x136>
 8003200:	2b40      	cmp	r3, #64	; 0x40
 8003202:	d86f      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x168>
 8003204:	2b30      	cmp	r3, #48	; 0x30
 8003206:	d064      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x156>
 8003208:	2b30      	cmp	r3, #48	; 0x30
 800320a:	d86b      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x168>
 800320c:	2b20      	cmp	r3, #32
 800320e:	d060      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x156>
 8003210:	2b20      	cmp	r3, #32
 8003212:	d867      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x168>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d05c      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x156>
 8003218:	2b10      	cmp	r3, #16
 800321a:	d05a      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800321c:	e062      	b.n	80032e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6899      	ldr	r1, [r3, #8]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f000 f95c 	bl	80034ea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003240:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	609a      	str	r2, [r3, #8]
      break;
 800324a:	e04e      	b.n	80032ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6818      	ldr	r0, [r3, #0]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	6899      	ldr	r1, [r3, #8]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f000 f945 	bl	80034ea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800326e:	609a      	str	r2, [r3, #8]
      break;
 8003270:	e03b      	b.n	80032ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	6859      	ldr	r1, [r3, #4]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	461a      	mov	r2, r3
 8003280:	f000 f8bc 	bl	80033fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2150      	movs	r1, #80	; 0x50
 800328a:	4618      	mov	r0, r3
 800328c:	f000 f913 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 8003290:	e02b      	b.n	80032ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6859      	ldr	r1, [r3, #4]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	461a      	mov	r2, r3
 80032a0:	f000 f8da 	bl	8003458 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2160      	movs	r1, #96	; 0x60
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 f903 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 80032b0:	e01b      	b.n	80032ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	6859      	ldr	r1, [r3, #4]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	461a      	mov	r2, r3
 80032c0:	f000 f89c 	bl	80033fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2140      	movs	r1, #64	; 0x40
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 f8f3 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 80032d0:	e00b      	b.n	80032ea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4619      	mov	r1, r3
 80032dc:	4610      	mov	r0, r2
 80032de:	f000 f8ea 	bl	80034b6 <TIM_ITRx_SetConfig>
        break;
 80032e2:	e002      	b.n	80032ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80032e4:	bf00      	nop
 80032e6:	e000      	b.n	80032ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80032e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr

08003316 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr

08003328 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr

0800333a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a25      	ldr	r2, [pc, #148]	; (80033f4 <TIM_Base_SetConfig+0xa8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d007      	beq.n	8003374 <TIM_Base_SetConfig+0x28>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336a:	d003      	beq.n	8003374 <TIM_Base_SetConfig+0x28>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a22      	ldr	r2, [pc, #136]	; (80033f8 <TIM_Base_SetConfig+0xac>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d108      	bne.n	8003386 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a1a      	ldr	r2, [pc, #104]	; (80033f4 <TIM_Base_SetConfig+0xa8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d007      	beq.n	800339e <TIM_Base_SetConfig+0x52>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003394:	d003      	beq.n	800339e <TIM_Base_SetConfig+0x52>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a17      	ldr	r2, [pc, #92]	; (80033f8 <TIM_Base_SetConfig+0xac>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d108      	bne.n	80033b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a07      	ldr	r2, [pc, #28]	; (80033f4 <TIM_Base_SetConfig+0xa8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d103      	bne.n	80033e4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	615a      	str	r2, [r3, #20]
}
 80033ea:	bf00      	nop
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr
 80033f4:	40012c00 	.word	0x40012c00
 80033f8:	40000400 	.word	0x40000400

080033fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f023 0201 	bic.w	r2, r3, #1
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f023 030a 	bic.w	r3, r3, #10
 8003438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	621a      	str	r2, [r3, #32]
}
 800344e:	bf00      	nop
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	f023 0210 	bic.w	r2, r3, #16
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003482:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	031b      	lsls	r3, r3, #12
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	4313      	orrs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003494:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	621a      	str	r2, [r3, #32]
}
 80034ac:	bf00      	nop
 80034ae:	371c      	adds	r7, #28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr

080034b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f043 0307 	orr.w	r3, r3, #7
 80034d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	609a      	str	r2, [r3, #8]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr

080034ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b087      	sub	sp, #28
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003504:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	021a      	lsls	r2, r3, #8
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	431a      	orrs	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4313      	orrs	r3, r2
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	609a      	str	r2, [r3, #8]
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800353c:	2302      	movs	r3, #2
 800353e:	e041      	b.n	80035c4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a14      	ldr	r2, [pc, #80]	; (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d009      	beq.n	8003598 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358c:	d004      	beq.n	8003598 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a10      	ldr	r2, [pc, #64]	; (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d10c      	bne.n	80035b2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800359e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	40000400 	.word	0x40000400

080035d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bc80      	pop	{r7}
 80035e8:	4770      	bx	lr

080035ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr

080035fc <__errno>:
 80035fc:	4b01      	ldr	r3, [pc, #4]	; (8003604 <__errno+0x8>)
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	2000000c 	.word	0x2000000c

08003608 <__libc_init_array>:
 8003608:	b570      	push	{r4, r5, r6, lr}
 800360a:	2600      	movs	r6, #0
 800360c:	4d0c      	ldr	r5, [pc, #48]	; (8003640 <__libc_init_array+0x38>)
 800360e:	4c0d      	ldr	r4, [pc, #52]	; (8003644 <__libc_init_array+0x3c>)
 8003610:	1b64      	subs	r4, r4, r5
 8003612:	10a4      	asrs	r4, r4, #2
 8003614:	42a6      	cmp	r6, r4
 8003616:	d109      	bne.n	800362c <__libc_init_array+0x24>
 8003618:	f001 f8da 	bl	80047d0 <_init>
 800361c:	2600      	movs	r6, #0
 800361e:	4d0a      	ldr	r5, [pc, #40]	; (8003648 <__libc_init_array+0x40>)
 8003620:	4c0a      	ldr	r4, [pc, #40]	; (800364c <__libc_init_array+0x44>)
 8003622:	1b64      	subs	r4, r4, r5
 8003624:	10a4      	asrs	r4, r4, #2
 8003626:	42a6      	cmp	r6, r4
 8003628:	d105      	bne.n	8003636 <__libc_init_array+0x2e>
 800362a:	bd70      	pop	{r4, r5, r6, pc}
 800362c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003630:	4798      	blx	r3
 8003632:	3601      	adds	r6, #1
 8003634:	e7ee      	b.n	8003614 <__libc_init_array+0xc>
 8003636:	f855 3b04 	ldr.w	r3, [r5], #4
 800363a:	4798      	blx	r3
 800363c:	3601      	adds	r6, #1
 800363e:	e7f2      	b.n	8003626 <__libc_init_array+0x1e>
 8003640:	08004958 	.word	0x08004958
 8003644:	08004958 	.word	0x08004958
 8003648:	08004958 	.word	0x08004958
 800364c:	0800495c 	.word	0x0800495c

08003650 <memcpy>:
 8003650:	440a      	add	r2, r1
 8003652:	4291      	cmp	r1, r2
 8003654:	f100 33ff 	add.w	r3, r0, #4294967295
 8003658:	d100      	bne.n	800365c <memcpy+0xc>
 800365a:	4770      	bx	lr
 800365c:	b510      	push	{r4, lr}
 800365e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003662:	4291      	cmp	r1, r2
 8003664:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003668:	d1f9      	bne.n	800365e <memcpy+0xe>
 800366a:	bd10      	pop	{r4, pc}

0800366c <memset>:
 800366c:	4603      	mov	r3, r0
 800366e:	4402      	add	r2, r0
 8003670:	4293      	cmp	r3, r2
 8003672:	d100      	bne.n	8003676 <memset+0xa>
 8003674:	4770      	bx	lr
 8003676:	f803 1b01 	strb.w	r1, [r3], #1
 800367a:	e7f9      	b.n	8003670 <memset+0x4>

0800367c <srand>:
 800367c:	b538      	push	{r3, r4, r5, lr}
 800367e:	4b10      	ldr	r3, [pc, #64]	; (80036c0 <srand+0x44>)
 8003680:	4604      	mov	r4, r0
 8003682:	681d      	ldr	r5, [r3, #0]
 8003684:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003686:	b9b3      	cbnz	r3, 80036b6 <srand+0x3a>
 8003688:	2018      	movs	r0, #24
 800368a:	f000 f881 	bl	8003790 <malloc>
 800368e:	4602      	mov	r2, r0
 8003690:	63a8      	str	r0, [r5, #56]	; 0x38
 8003692:	b920      	cbnz	r0, 800369e <srand+0x22>
 8003694:	2142      	movs	r1, #66	; 0x42
 8003696:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <srand+0x48>)
 8003698:	480b      	ldr	r0, [pc, #44]	; (80036c8 <srand+0x4c>)
 800369a:	f000 f837 	bl	800370c <__assert_func>
 800369e:	490b      	ldr	r1, [pc, #44]	; (80036cc <srand+0x50>)
 80036a0:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <srand+0x54>)
 80036a2:	e9c0 1300 	strd	r1, r3, [r0]
 80036a6:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <srand+0x58>)
 80036a8:	2100      	movs	r1, #0
 80036aa:	6083      	str	r3, [r0, #8]
 80036ac:	230b      	movs	r3, #11
 80036ae:	8183      	strh	r3, [r0, #12]
 80036b0:	2001      	movs	r0, #1
 80036b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80036b6:	2200      	movs	r2, #0
 80036b8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80036ba:	611c      	str	r4, [r3, #16]
 80036bc:	615a      	str	r2, [r3, #20]
 80036be:	bd38      	pop	{r3, r4, r5, pc}
 80036c0:	2000000c 	.word	0x2000000c
 80036c4:	08004814 	.word	0x08004814
 80036c8:	0800482b 	.word	0x0800482b
 80036cc:	abcd330e 	.word	0xabcd330e
 80036d0:	e66d1234 	.word	0xe66d1234
 80036d4:	0005deec 	.word	0x0005deec

080036d8 <time>:
 80036d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80036da:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <time+0x30>)
 80036dc:	4604      	mov	r4, r0
 80036de:	2200      	movs	r2, #0
 80036e0:	4669      	mov	r1, sp
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	f000 f842 	bl	800376c <_gettimeofday_r>
 80036e8:	2800      	cmp	r0, #0
 80036ea:	da05      	bge.n	80036f8 <time+0x20>
 80036ec:	f04f 32ff 	mov.w	r2, #4294967295
 80036f0:	f04f 33ff 	mov.w	r3, #4294967295
 80036f4:	e9cd 2300 	strd	r2, r3, [sp]
 80036f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80036fc:	b10c      	cbz	r4, 8003702 <time+0x2a>
 80036fe:	e9c4 0100 	strd	r0, r1, [r4]
 8003702:	b004      	add	sp, #16
 8003704:	bd10      	pop	{r4, pc}
 8003706:	bf00      	nop
 8003708:	2000000c 	.word	0x2000000c

0800370c <__assert_func>:
 800370c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800370e:	4614      	mov	r4, r2
 8003710:	461a      	mov	r2, r3
 8003712:	4b09      	ldr	r3, [pc, #36]	; (8003738 <__assert_func+0x2c>)
 8003714:	4605      	mov	r5, r0
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68d8      	ldr	r0, [r3, #12]
 800371a:	b14c      	cbz	r4, 8003730 <__assert_func+0x24>
 800371c:	4b07      	ldr	r3, [pc, #28]	; (800373c <__assert_func+0x30>)
 800371e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003722:	9100      	str	r1, [sp, #0]
 8003724:	462b      	mov	r3, r5
 8003726:	4906      	ldr	r1, [pc, #24]	; (8003740 <__assert_func+0x34>)
 8003728:	f000 f80e 	bl	8003748 <fiprintf>
 800372c:	f000 fcd2 	bl	80040d4 <abort>
 8003730:	4b04      	ldr	r3, [pc, #16]	; (8003744 <__assert_func+0x38>)
 8003732:	461c      	mov	r4, r3
 8003734:	e7f3      	b.n	800371e <__assert_func+0x12>
 8003736:	bf00      	nop
 8003738:	2000000c 	.word	0x2000000c
 800373c:	08004886 	.word	0x08004886
 8003740:	08004893 	.word	0x08004893
 8003744:	080048c1 	.word	0x080048c1

08003748 <fiprintf>:
 8003748:	b40e      	push	{r1, r2, r3}
 800374a:	b503      	push	{r0, r1, lr}
 800374c:	4601      	mov	r1, r0
 800374e:	ab03      	add	r3, sp, #12
 8003750:	4805      	ldr	r0, [pc, #20]	; (8003768 <fiprintf+0x20>)
 8003752:	f853 2b04 	ldr.w	r2, [r3], #4
 8003756:	6800      	ldr	r0, [r0, #0]
 8003758:	9301      	str	r3, [sp, #4]
 800375a:	f000 f925 	bl	80039a8 <_vfiprintf_r>
 800375e:	b002      	add	sp, #8
 8003760:	f85d eb04 	ldr.w	lr, [sp], #4
 8003764:	b003      	add	sp, #12
 8003766:	4770      	bx	lr
 8003768:	2000000c 	.word	0x2000000c

0800376c <_gettimeofday_r>:
 800376c:	b538      	push	{r3, r4, r5, lr}
 800376e:	2300      	movs	r3, #0
 8003770:	4d06      	ldr	r5, [pc, #24]	; (800378c <_gettimeofday_r+0x20>)
 8003772:	4604      	mov	r4, r0
 8003774:	4608      	mov	r0, r1
 8003776:	4611      	mov	r1, r2
 8003778:	602b      	str	r3, [r5, #0]
 800377a:	f001 f821 	bl	80047c0 <_gettimeofday>
 800377e:	1c43      	adds	r3, r0, #1
 8003780:	d102      	bne.n	8003788 <_gettimeofday_r+0x1c>
 8003782:	682b      	ldr	r3, [r5, #0]
 8003784:	b103      	cbz	r3, 8003788 <_gettimeofday_r+0x1c>
 8003786:	6023      	str	r3, [r4, #0]
 8003788:	bd38      	pop	{r3, r4, r5, pc}
 800378a:	bf00      	nop
 800378c:	20000290 	.word	0x20000290

08003790 <malloc>:
 8003790:	4b02      	ldr	r3, [pc, #8]	; (800379c <malloc+0xc>)
 8003792:	4601      	mov	r1, r0
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	f000 b86b 	b.w	8003870 <_malloc_r>
 800379a:	bf00      	nop
 800379c:	2000000c 	.word	0x2000000c

080037a0 <_free_r>:
 80037a0:	b538      	push	{r3, r4, r5, lr}
 80037a2:	4605      	mov	r5, r0
 80037a4:	2900      	cmp	r1, #0
 80037a6:	d040      	beq.n	800382a <_free_r+0x8a>
 80037a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037ac:	1f0c      	subs	r4, r1, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	bfb8      	it	lt
 80037b2:	18e4      	addlt	r4, r4, r3
 80037b4:	f000 fec0 	bl	8004538 <__malloc_lock>
 80037b8:	4a1c      	ldr	r2, [pc, #112]	; (800382c <_free_r+0x8c>)
 80037ba:	6813      	ldr	r3, [r2, #0]
 80037bc:	b933      	cbnz	r3, 80037cc <_free_r+0x2c>
 80037be:	6063      	str	r3, [r4, #4]
 80037c0:	6014      	str	r4, [r2, #0]
 80037c2:	4628      	mov	r0, r5
 80037c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037c8:	f000 bebc 	b.w	8004544 <__malloc_unlock>
 80037cc:	42a3      	cmp	r3, r4
 80037ce:	d908      	bls.n	80037e2 <_free_r+0x42>
 80037d0:	6820      	ldr	r0, [r4, #0]
 80037d2:	1821      	adds	r1, r4, r0
 80037d4:	428b      	cmp	r3, r1
 80037d6:	bf01      	itttt	eq
 80037d8:	6819      	ldreq	r1, [r3, #0]
 80037da:	685b      	ldreq	r3, [r3, #4]
 80037dc:	1809      	addeq	r1, r1, r0
 80037de:	6021      	streq	r1, [r4, #0]
 80037e0:	e7ed      	b.n	80037be <_free_r+0x1e>
 80037e2:	461a      	mov	r2, r3
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	b10b      	cbz	r3, 80037ec <_free_r+0x4c>
 80037e8:	42a3      	cmp	r3, r4
 80037ea:	d9fa      	bls.n	80037e2 <_free_r+0x42>
 80037ec:	6811      	ldr	r1, [r2, #0]
 80037ee:	1850      	adds	r0, r2, r1
 80037f0:	42a0      	cmp	r0, r4
 80037f2:	d10b      	bne.n	800380c <_free_r+0x6c>
 80037f4:	6820      	ldr	r0, [r4, #0]
 80037f6:	4401      	add	r1, r0
 80037f8:	1850      	adds	r0, r2, r1
 80037fa:	4283      	cmp	r3, r0
 80037fc:	6011      	str	r1, [r2, #0]
 80037fe:	d1e0      	bne.n	80037c2 <_free_r+0x22>
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4401      	add	r1, r0
 8003806:	6011      	str	r1, [r2, #0]
 8003808:	6053      	str	r3, [r2, #4]
 800380a:	e7da      	b.n	80037c2 <_free_r+0x22>
 800380c:	d902      	bls.n	8003814 <_free_r+0x74>
 800380e:	230c      	movs	r3, #12
 8003810:	602b      	str	r3, [r5, #0]
 8003812:	e7d6      	b.n	80037c2 <_free_r+0x22>
 8003814:	6820      	ldr	r0, [r4, #0]
 8003816:	1821      	adds	r1, r4, r0
 8003818:	428b      	cmp	r3, r1
 800381a:	bf01      	itttt	eq
 800381c:	6819      	ldreq	r1, [r3, #0]
 800381e:	685b      	ldreq	r3, [r3, #4]
 8003820:	1809      	addeq	r1, r1, r0
 8003822:	6021      	streq	r1, [r4, #0]
 8003824:	6063      	str	r3, [r4, #4]
 8003826:	6054      	str	r4, [r2, #4]
 8003828:	e7cb      	b.n	80037c2 <_free_r+0x22>
 800382a:	bd38      	pop	{r3, r4, r5, pc}
 800382c:	20000288 	.word	0x20000288

08003830 <sbrk_aligned>:
 8003830:	b570      	push	{r4, r5, r6, lr}
 8003832:	4e0e      	ldr	r6, [pc, #56]	; (800386c <sbrk_aligned+0x3c>)
 8003834:	460c      	mov	r4, r1
 8003836:	6831      	ldr	r1, [r6, #0]
 8003838:	4605      	mov	r5, r0
 800383a:	b911      	cbnz	r1, 8003842 <sbrk_aligned+0x12>
 800383c:	f000 fb7a 	bl	8003f34 <_sbrk_r>
 8003840:	6030      	str	r0, [r6, #0]
 8003842:	4621      	mov	r1, r4
 8003844:	4628      	mov	r0, r5
 8003846:	f000 fb75 	bl	8003f34 <_sbrk_r>
 800384a:	1c43      	adds	r3, r0, #1
 800384c:	d00a      	beq.n	8003864 <sbrk_aligned+0x34>
 800384e:	1cc4      	adds	r4, r0, #3
 8003850:	f024 0403 	bic.w	r4, r4, #3
 8003854:	42a0      	cmp	r0, r4
 8003856:	d007      	beq.n	8003868 <sbrk_aligned+0x38>
 8003858:	1a21      	subs	r1, r4, r0
 800385a:	4628      	mov	r0, r5
 800385c:	f000 fb6a 	bl	8003f34 <_sbrk_r>
 8003860:	3001      	adds	r0, #1
 8003862:	d101      	bne.n	8003868 <sbrk_aligned+0x38>
 8003864:	f04f 34ff 	mov.w	r4, #4294967295
 8003868:	4620      	mov	r0, r4
 800386a:	bd70      	pop	{r4, r5, r6, pc}
 800386c:	2000028c 	.word	0x2000028c

08003870 <_malloc_r>:
 8003870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003874:	1ccd      	adds	r5, r1, #3
 8003876:	f025 0503 	bic.w	r5, r5, #3
 800387a:	3508      	adds	r5, #8
 800387c:	2d0c      	cmp	r5, #12
 800387e:	bf38      	it	cc
 8003880:	250c      	movcc	r5, #12
 8003882:	2d00      	cmp	r5, #0
 8003884:	4607      	mov	r7, r0
 8003886:	db01      	blt.n	800388c <_malloc_r+0x1c>
 8003888:	42a9      	cmp	r1, r5
 800388a:	d905      	bls.n	8003898 <_malloc_r+0x28>
 800388c:	230c      	movs	r3, #12
 800388e:	2600      	movs	r6, #0
 8003890:	603b      	str	r3, [r7, #0]
 8003892:	4630      	mov	r0, r6
 8003894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003898:	4e2e      	ldr	r6, [pc, #184]	; (8003954 <_malloc_r+0xe4>)
 800389a:	f000 fe4d 	bl	8004538 <__malloc_lock>
 800389e:	6833      	ldr	r3, [r6, #0]
 80038a0:	461c      	mov	r4, r3
 80038a2:	bb34      	cbnz	r4, 80038f2 <_malloc_r+0x82>
 80038a4:	4629      	mov	r1, r5
 80038a6:	4638      	mov	r0, r7
 80038a8:	f7ff ffc2 	bl	8003830 <sbrk_aligned>
 80038ac:	1c43      	adds	r3, r0, #1
 80038ae:	4604      	mov	r4, r0
 80038b0:	d14d      	bne.n	800394e <_malloc_r+0xde>
 80038b2:	6834      	ldr	r4, [r6, #0]
 80038b4:	4626      	mov	r6, r4
 80038b6:	2e00      	cmp	r6, #0
 80038b8:	d140      	bne.n	800393c <_malloc_r+0xcc>
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	4631      	mov	r1, r6
 80038be:	4638      	mov	r0, r7
 80038c0:	eb04 0803 	add.w	r8, r4, r3
 80038c4:	f000 fb36 	bl	8003f34 <_sbrk_r>
 80038c8:	4580      	cmp	r8, r0
 80038ca:	d13a      	bne.n	8003942 <_malloc_r+0xd2>
 80038cc:	6821      	ldr	r1, [r4, #0]
 80038ce:	3503      	adds	r5, #3
 80038d0:	1a6d      	subs	r5, r5, r1
 80038d2:	f025 0503 	bic.w	r5, r5, #3
 80038d6:	3508      	adds	r5, #8
 80038d8:	2d0c      	cmp	r5, #12
 80038da:	bf38      	it	cc
 80038dc:	250c      	movcc	r5, #12
 80038de:	4638      	mov	r0, r7
 80038e0:	4629      	mov	r1, r5
 80038e2:	f7ff ffa5 	bl	8003830 <sbrk_aligned>
 80038e6:	3001      	adds	r0, #1
 80038e8:	d02b      	beq.n	8003942 <_malloc_r+0xd2>
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	442b      	add	r3, r5
 80038ee:	6023      	str	r3, [r4, #0]
 80038f0:	e00e      	b.n	8003910 <_malloc_r+0xa0>
 80038f2:	6822      	ldr	r2, [r4, #0]
 80038f4:	1b52      	subs	r2, r2, r5
 80038f6:	d41e      	bmi.n	8003936 <_malloc_r+0xc6>
 80038f8:	2a0b      	cmp	r2, #11
 80038fa:	d916      	bls.n	800392a <_malloc_r+0xba>
 80038fc:	1961      	adds	r1, r4, r5
 80038fe:	42a3      	cmp	r3, r4
 8003900:	6025      	str	r5, [r4, #0]
 8003902:	bf18      	it	ne
 8003904:	6059      	strne	r1, [r3, #4]
 8003906:	6863      	ldr	r3, [r4, #4]
 8003908:	bf08      	it	eq
 800390a:	6031      	streq	r1, [r6, #0]
 800390c:	5162      	str	r2, [r4, r5]
 800390e:	604b      	str	r3, [r1, #4]
 8003910:	4638      	mov	r0, r7
 8003912:	f104 060b 	add.w	r6, r4, #11
 8003916:	f000 fe15 	bl	8004544 <__malloc_unlock>
 800391a:	f026 0607 	bic.w	r6, r6, #7
 800391e:	1d23      	adds	r3, r4, #4
 8003920:	1af2      	subs	r2, r6, r3
 8003922:	d0b6      	beq.n	8003892 <_malloc_r+0x22>
 8003924:	1b9b      	subs	r3, r3, r6
 8003926:	50a3      	str	r3, [r4, r2]
 8003928:	e7b3      	b.n	8003892 <_malloc_r+0x22>
 800392a:	6862      	ldr	r2, [r4, #4]
 800392c:	42a3      	cmp	r3, r4
 800392e:	bf0c      	ite	eq
 8003930:	6032      	streq	r2, [r6, #0]
 8003932:	605a      	strne	r2, [r3, #4]
 8003934:	e7ec      	b.n	8003910 <_malloc_r+0xa0>
 8003936:	4623      	mov	r3, r4
 8003938:	6864      	ldr	r4, [r4, #4]
 800393a:	e7b2      	b.n	80038a2 <_malloc_r+0x32>
 800393c:	4634      	mov	r4, r6
 800393e:	6876      	ldr	r6, [r6, #4]
 8003940:	e7b9      	b.n	80038b6 <_malloc_r+0x46>
 8003942:	230c      	movs	r3, #12
 8003944:	4638      	mov	r0, r7
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	f000 fdfc 	bl	8004544 <__malloc_unlock>
 800394c:	e7a1      	b.n	8003892 <_malloc_r+0x22>
 800394e:	6025      	str	r5, [r4, #0]
 8003950:	e7de      	b.n	8003910 <_malloc_r+0xa0>
 8003952:	bf00      	nop
 8003954:	20000288 	.word	0x20000288

08003958 <__sfputc_r>:
 8003958:	6893      	ldr	r3, [r2, #8]
 800395a:	b410      	push	{r4}
 800395c:	3b01      	subs	r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	6093      	str	r3, [r2, #8]
 8003962:	da07      	bge.n	8003974 <__sfputc_r+0x1c>
 8003964:	6994      	ldr	r4, [r2, #24]
 8003966:	42a3      	cmp	r3, r4
 8003968:	db01      	blt.n	800396e <__sfputc_r+0x16>
 800396a:	290a      	cmp	r1, #10
 800396c:	d102      	bne.n	8003974 <__sfputc_r+0x1c>
 800396e:	bc10      	pop	{r4}
 8003970:	f000 baf0 	b.w	8003f54 <__swbuf_r>
 8003974:	6813      	ldr	r3, [r2, #0]
 8003976:	1c58      	adds	r0, r3, #1
 8003978:	6010      	str	r0, [r2, #0]
 800397a:	7019      	strb	r1, [r3, #0]
 800397c:	4608      	mov	r0, r1
 800397e:	bc10      	pop	{r4}
 8003980:	4770      	bx	lr

08003982 <__sfputs_r>:
 8003982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003984:	4606      	mov	r6, r0
 8003986:	460f      	mov	r7, r1
 8003988:	4614      	mov	r4, r2
 800398a:	18d5      	adds	r5, r2, r3
 800398c:	42ac      	cmp	r4, r5
 800398e:	d101      	bne.n	8003994 <__sfputs_r+0x12>
 8003990:	2000      	movs	r0, #0
 8003992:	e007      	b.n	80039a4 <__sfputs_r+0x22>
 8003994:	463a      	mov	r2, r7
 8003996:	4630      	mov	r0, r6
 8003998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800399c:	f7ff ffdc 	bl	8003958 <__sfputc_r>
 80039a0:	1c43      	adds	r3, r0, #1
 80039a2:	d1f3      	bne.n	800398c <__sfputs_r+0xa>
 80039a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039a8 <_vfiprintf_r>:
 80039a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ac:	460d      	mov	r5, r1
 80039ae:	4614      	mov	r4, r2
 80039b0:	4698      	mov	r8, r3
 80039b2:	4606      	mov	r6, r0
 80039b4:	b09d      	sub	sp, #116	; 0x74
 80039b6:	b118      	cbz	r0, 80039c0 <_vfiprintf_r+0x18>
 80039b8:	6983      	ldr	r3, [r0, #24]
 80039ba:	b90b      	cbnz	r3, 80039c0 <_vfiprintf_r+0x18>
 80039bc:	f000 fca8 	bl	8004310 <__sinit>
 80039c0:	4b89      	ldr	r3, [pc, #548]	; (8003be8 <_vfiprintf_r+0x240>)
 80039c2:	429d      	cmp	r5, r3
 80039c4:	d11b      	bne.n	80039fe <_vfiprintf_r+0x56>
 80039c6:	6875      	ldr	r5, [r6, #4]
 80039c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039ca:	07d9      	lsls	r1, r3, #31
 80039cc:	d405      	bmi.n	80039da <_vfiprintf_r+0x32>
 80039ce:	89ab      	ldrh	r3, [r5, #12]
 80039d0:	059a      	lsls	r2, r3, #22
 80039d2:	d402      	bmi.n	80039da <_vfiprintf_r+0x32>
 80039d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039d6:	f000 fd39 	bl	800444c <__retarget_lock_acquire_recursive>
 80039da:	89ab      	ldrh	r3, [r5, #12]
 80039dc:	071b      	lsls	r3, r3, #28
 80039de:	d501      	bpl.n	80039e4 <_vfiprintf_r+0x3c>
 80039e0:	692b      	ldr	r3, [r5, #16]
 80039e2:	b9eb      	cbnz	r3, 8003a20 <_vfiprintf_r+0x78>
 80039e4:	4629      	mov	r1, r5
 80039e6:	4630      	mov	r0, r6
 80039e8:	f000 fb06 	bl	8003ff8 <__swsetup_r>
 80039ec:	b1c0      	cbz	r0, 8003a20 <_vfiprintf_r+0x78>
 80039ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039f0:	07dc      	lsls	r4, r3, #31
 80039f2:	d50e      	bpl.n	8003a12 <_vfiprintf_r+0x6a>
 80039f4:	f04f 30ff 	mov.w	r0, #4294967295
 80039f8:	b01d      	add	sp, #116	; 0x74
 80039fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039fe:	4b7b      	ldr	r3, [pc, #492]	; (8003bec <_vfiprintf_r+0x244>)
 8003a00:	429d      	cmp	r5, r3
 8003a02:	d101      	bne.n	8003a08 <_vfiprintf_r+0x60>
 8003a04:	68b5      	ldr	r5, [r6, #8]
 8003a06:	e7df      	b.n	80039c8 <_vfiprintf_r+0x20>
 8003a08:	4b79      	ldr	r3, [pc, #484]	; (8003bf0 <_vfiprintf_r+0x248>)
 8003a0a:	429d      	cmp	r5, r3
 8003a0c:	bf08      	it	eq
 8003a0e:	68f5      	ldreq	r5, [r6, #12]
 8003a10:	e7da      	b.n	80039c8 <_vfiprintf_r+0x20>
 8003a12:	89ab      	ldrh	r3, [r5, #12]
 8003a14:	0598      	lsls	r0, r3, #22
 8003a16:	d4ed      	bmi.n	80039f4 <_vfiprintf_r+0x4c>
 8003a18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a1a:	f000 fd18 	bl	800444e <__retarget_lock_release_recursive>
 8003a1e:	e7e9      	b.n	80039f4 <_vfiprintf_r+0x4c>
 8003a20:	2300      	movs	r3, #0
 8003a22:	9309      	str	r3, [sp, #36]	; 0x24
 8003a24:	2320      	movs	r3, #32
 8003a26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a2a:	2330      	movs	r3, #48	; 0x30
 8003a2c:	f04f 0901 	mov.w	r9, #1
 8003a30:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a34:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003bf4 <_vfiprintf_r+0x24c>
 8003a38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a3c:	4623      	mov	r3, r4
 8003a3e:	469a      	mov	sl, r3
 8003a40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a44:	b10a      	cbz	r2, 8003a4a <_vfiprintf_r+0xa2>
 8003a46:	2a25      	cmp	r2, #37	; 0x25
 8003a48:	d1f9      	bne.n	8003a3e <_vfiprintf_r+0x96>
 8003a4a:	ebba 0b04 	subs.w	fp, sl, r4
 8003a4e:	d00b      	beq.n	8003a68 <_vfiprintf_r+0xc0>
 8003a50:	465b      	mov	r3, fp
 8003a52:	4622      	mov	r2, r4
 8003a54:	4629      	mov	r1, r5
 8003a56:	4630      	mov	r0, r6
 8003a58:	f7ff ff93 	bl	8003982 <__sfputs_r>
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	f000 80aa 	beq.w	8003bb6 <_vfiprintf_r+0x20e>
 8003a62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a64:	445a      	add	r2, fp
 8003a66:	9209      	str	r2, [sp, #36]	; 0x24
 8003a68:	f89a 3000 	ldrb.w	r3, [sl]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 80a2 	beq.w	8003bb6 <_vfiprintf_r+0x20e>
 8003a72:	2300      	movs	r3, #0
 8003a74:	f04f 32ff 	mov.w	r2, #4294967295
 8003a78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a7c:	f10a 0a01 	add.w	sl, sl, #1
 8003a80:	9304      	str	r3, [sp, #16]
 8003a82:	9307      	str	r3, [sp, #28]
 8003a84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a88:	931a      	str	r3, [sp, #104]	; 0x68
 8003a8a:	4654      	mov	r4, sl
 8003a8c:	2205      	movs	r2, #5
 8003a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a92:	4858      	ldr	r0, [pc, #352]	; (8003bf4 <_vfiprintf_r+0x24c>)
 8003a94:	f000 fd42 	bl	800451c <memchr>
 8003a98:	9a04      	ldr	r2, [sp, #16]
 8003a9a:	b9d8      	cbnz	r0, 8003ad4 <_vfiprintf_r+0x12c>
 8003a9c:	06d1      	lsls	r1, r2, #27
 8003a9e:	bf44      	itt	mi
 8003aa0:	2320      	movmi	r3, #32
 8003aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003aa6:	0713      	lsls	r3, r2, #28
 8003aa8:	bf44      	itt	mi
 8003aaa:	232b      	movmi	r3, #43	; 0x2b
 8003aac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ab4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ab6:	d015      	beq.n	8003ae4 <_vfiprintf_r+0x13c>
 8003ab8:	4654      	mov	r4, sl
 8003aba:	2000      	movs	r0, #0
 8003abc:	f04f 0c0a 	mov.w	ip, #10
 8003ac0:	9a07      	ldr	r2, [sp, #28]
 8003ac2:	4621      	mov	r1, r4
 8003ac4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ac8:	3b30      	subs	r3, #48	; 0x30
 8003aca:	2b09      	cmp	r3, #9
 8003acc:	d94e      	bls.n	8003b6c <_vfiprintf_r+0x1c4>
 8003ace:	b1b0      	cbz	r0, 8003afe <_vfiprintf_r+0x156>
 8003ad0:	9207      	str	r2, [sp, #28]
 8003ad2:	e014      	b.n	8003afe <_vfiprintf_r+0x156>
 8003ad4:	eba0 0308 	sub.w	r3, r0, r8
 8003ad8:	fa09 f303 	lsl.w	r3, r9, r3
 8003adc:	4313      	orrs	r3, r2
 8003ade:	46a2      	mov	sl, r4
 8003ae0:	9304      	str	r3, [sp, #16]
 8003ae2:	e7d2      	b.n	8003a8a <_vfiprintf_r+0xe2>
 8003ae4:	9b03      	ldr	r3, [sp, #12]
 8003ae6:	1d19      	adds	r1, r3, #4
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	9103      	str	r1, [sp, #12]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bfbb      	ittet	lt
 8003af0:	425b      	neglt	r3, r3
 8003af2:	f042 0202 	orrlt.w	r2, r2, #2
 8003af6:	9307      	strge	r3, [sp, #28]
 8003af8:	9307      	strlt	r3, [sp, #28]
 8003afa:	bfb8      	it	lt
 8003afc:	9204      	strlt	r2, [sp, #16]
 8003afe:	7823      	ldrb	r3, [r4, #0]
 8003b00:	2b2e      	cmp	r3, #46	; 0x2e
 8003b02:	d10c      	bne.n	8003b1e <_vfiprintf_r+0x176>
 8003b04:	7863      	ldrb	r3, [r4, #1]
 8003b06:	2b2a      	cmp	r3, #42	; 0x2a
 8003b08:	d135      	bne.n	8003b76 <_vfiprintf_r+0x1ce>
 8003b0a:	9b03      	ldr	r3, [sp, #12]
 8003b0c:	3402      	adds	r4, #2
 8003b0e:	1d1a      	adds	r2, r3, #4
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	9203      	str	r2, [sp, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	bfb8      	it	lt
 8003b18:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b1c:	9305      	str	r3, [sp, #20]
 8003b1e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003bf8 <_vfiprintf_r+0x250>
 8003b22:	2203      	movs	r2, #3
 8003b24:	4650      	mov	r0, sl
 8003b26:	7821      	ldrb	r1, [r4, #0]
 8003b28:	f000 fcf8 	bl	800451c <memchr>
 8003b2c:	b140      	cbz	r0, 8003b40 <_vfiprintf_r+0x198>
 8003b2e:	2340      	movs	r3, #64	; 0x40
 8003b30:	eba0 000a 	sub.w	r0, r0, sl
 8003b34:	fa03 f000 	lsl.w	r0, r3, r0
 8003b38:	9b04      	ldr	r3, [sp, #16]
 8003b3a:	3401      	adds	r4, #1
 8003b3c:	4303      	orrs	r3, r0
 8003b3e:	9304      	str	r3, [sp, #16]
 8003b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b44:	2206      	movs	r2, #6
 8003b46:	482d      	ldr	r0, [pc, #180]	; (8003bfc <_vfiprintf_r+0x254>)
 8003b48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b4c:	f000 fce6 	bl	800451c <memchr>
 8003b50:	2800      	cmp	r0, #0
 8003b52:	d03f      	beq.n	8003bd4 <_vfiprintf_r+0x22c>
 8003b54:	4b2a      	ldr	r3, [pc, #168]	; (8003c00 <_vfiprintf_r+0x258>)
 8003b56:	bb1b      	cbnz	r3, 8003ba0 <_vfiprintf_r+0x1f8>
 8003b58:	9b03      	ldr	r3, [sp, #12]
 8003b5a:	3307      	adds	r3, #7
 8003b5c:	f023 0307 	bic.w	r3, r3, #7
 8003b60:	3308      	adds	r3, #8
 8003b62:	9303      	str	r3, [sp, #12]
 8003b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b66:	443b      	add	r3, r7
 8003b68:	9309      	str	r3, [sp, #36]	; 0x24
 8003b6a:	e767      	b.n	8003a3c <_vfiprintf_r+0x94>
 8003b6c:	460c      	mov	r4, r1
 8003b6e:	2001      	movs	r0, #1
 8003b70:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b74:	e7a5      	b.n	8003ac2 <_vfiprintf_r+0x11a>
 8003b76:	2300      	movs	r3, #0
 8003b78:	f04f 0c0a 	mov.w	ip, #10
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	3401      	adds	r4, #1
 8003b80:	9305      	str	r3, [sp, #20]
 8003b82:	4620      	mov	r0, r4
 8003b84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b88:	3a30      	subs	r2, #48	; 0x30
 8003b8a:	2a09      	cmp	r2, #9
 8003b8c:	d903      	bls.n	8003b96 <_vfiprintf_r+0x1ee>
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0c5      	beq.n	8003b1e <_vfiprintf_r+0x176>
 8003b92:	9105      	str	r1, [sp, #20]
 8003b94:	e7c3      	b.n	8003b1e <_vfiprintf_r+0x176>
 8003b96:	4604      	mov	r4, r0
 8003b98:	2301      	movs	r3, #1
 8003b9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b9e:	e7f0      	b.n	8003b82 <_vfiprintf_r+0x1da>
 8003ba0:	ab03      	add	r3, sp, #12
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	462a      	mov	r2, r5
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	4b16      	ldr	r3, [pc, #88]	; (8003c04 <_vfiprintf_r+0x25c>)
 8003baa:	a904      	add	r1, sp, #16
 8003bac:	f3af 8000 	nop.w
 8003bb0:	4607      	mov	r7, r0
 8003bb2:	1c78      	adds	r0, r7, #1
 8003bb4:	d1d6      	bne.n	8003b64 <_vfiprintf_r+0x1bc>
 8003bb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003bb8:	07d9      	lsls	r1, r3, #31
 8003bba:	d405      	bmi.n	8003bc8 <_vfiprintf_r+0x220>
 8003bbc:	89ab      	ldrh	r3, [r5, #12]
 8003bbe:	059a      	lsls	r2, r3, #22
 8003bc0:	d402      	bmi.n	8003bc8 <_vfiprintf_r+0x220>
 8003bc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bc4:	f000 fc43 	bl	800444e <__retarget_lock_release_recursive>
 8003bc8:	89ab      	ldrh	r3, [r5, #12]
 8003bca:	065b      	lsls	r3, r3, #25
 8003bcc:	f53f af12 	bmi.w	80039f4 <_vfiprintf_r+0x4c>
 8003bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bd2:	e711      	b.n	80039f8 <_vfiprintf_r+0x50>
 8003bd4:	ab03      	add	r3, sp, #12
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	462a      	mov	r2, r5
 8003bda:	4630      	mov	r0, r6
 8003bdc:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <_vfiprintf_r+0x25c>)
 8003bde:	a904      	add	r1, sp, #16
 8003be0:	f000 f882 	bl	8003ce8 <_printf_i>
 8003be4:	e7e4      	b.n	8003bb0 <_vfiprintf_r+0x208>
 8003be6:	bf00      	nop
 8003be8:	08004918 	.word	0x08004918
 8003bec:	08004938 	.word	0x08004938
 8003bf0:	080048f8 	.word	0x080048f8
 8003bf4:	080048c2 	.word	0x080048c2
 8003bf8:	080048c8 	.word	0x080048c8
 8003bfc:	080048cc 	.word	0x080048cc
 8003c00:	00000000 	.word	0x00000000
 8003c04:	08003983 	.word	0x08003983

08003c08 <_printf_common>:
 8003c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c0c:	4616      	mov	r6, r2
 8003c0e:	4699      	mov	r9, r3
 8003c10:	688a      	ldr	r2, [r1, #8]
 8003c12:	690b      	ldr	r3, [r1, #16]
 8003c14:	4607      	mov	r7, r0
 8003c16:	4293      	cmp	r3, r2
 8003c18:	bfb8      	it	lt
 8003c1a:	4613      	movlt	r3, r2
 8003c1c:	6033      	str	r3, [r6, #0]
 8003c1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c22:	460c      	mov	r4, r1
 8003c24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c28:	b10a      	cbz	r2, 8003c2e <_printf_common+0x26>
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	6033      	str	r3, [r6, #0]
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	0699      	lsls	r1, r3, #26
 8003c32:	bf42      	ittt	mi
 8003c34:	6833      	ldrmi	r3, [r6, #0]
 8003c36:	3302      	addmi	r3, #2
 8003c38:	6033      	strmi	r3, [r6, #0]
 8003c3a:	6825      	ldr	r5, [r4, #0]
 8003c3c:	f015 0506 	ands.w	r5, r5, #6
 8003c40:	d106      	bne.n	8003c50 <_printf_common+0x48>
 8003c42:	f104 0a19 	add.w	sl, r4, #25
 8003c46:	68e3      	ldr	r3, [r4, #12]
 8003c48:	6832      	ldr	r2, [r6, #0]
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	42ab      	cmp	r3, r5
 8003c4e:	dc28      	bgt.n	8003ca2 <_printf_common+0x9a>
 8003c50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c54:	1e13      	subs	r3, r2, #0
 8003c56:	6822      	ldr	r2, [r4, #0]
 8003c58:	bf18      	it	ne
 8003c5a:	2301      	movne	r3, #1
 8003c5c:	0692      	lsls	r2, r2, #26
 8003c5e:	d42d      	bmi.n	8003cbc <_printf_common+0xb4>
 8003c60:	4649      	mov	r1, r9
 8003c62:	4638      	mov	r0, r7
 8003c64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c68:	47c0      	blx	r8
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	d020      	beq.n	8003cb0 <_printf_common+0xa8>
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	68e5      	ldr	r5, [r4, #12]
 8003c72:	f003 0306 	and.w	r3, r3, #6
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	bf18      	it	ne
 8003c7a:	2500      	movne	r5, #0
 8003c7c:	6832      	ldr	r2, [r6, #0]
 8003c7e:	f04f 0600 	mov.w	r6, #0
 8003c82:	68a3      	ldr	r3, [r4, #8]
 8003c84:	bf08      	it	eq
 8003c86:	1aad      	subeq	r5, r5, r2
 8003c88:	6922      	ldr	r2, [r4, #16]
 8003c8a:	bf08      	it	eq
 8003c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c90:	4293      	cmp	r3, r2
 8003c92:	bfc4      	itt	gt
 8003c94:	1a9b      	subgt	r3, r3, r2
 8003c96:	18ed      	addgt	r5, r5, r3
 8003c98:	341a      	adds	r4, #26
 8003c9a:	42b5      	cmp	r5, r6
 8003c9c:	d11a      	bne.n	8003cd4 <_printf_common+0xcc>
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	e008      	b.n	8003cb4 <_printf_common+0xac>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	4652      	mov	r2, sl
 8003ca6:	4649      	mov	r1, r9
 8003ca8:	4638      	mov	r0, r7
 8003caa:	47c0      	blx	r8
 8003cac:	3001      	adds	r0, #1
 8003cae:	d103      	bne.n	8003cb8 <_printf_common+0xb0>
 8003cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cb8:	3501      	adds	r5, #1
 8003cba:	e7c4      	b.n	8003c46 <_printf_common+0x3e>
 8003cbc:	2030      	movs	r0, #48	; 0x30
 8003cbe:	18e1      	adds	r1, r4, r3
 8003cc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cca:	4422      	add	r2, r4
 8003ccc:	3302      	adds	r3, #2
 8003cce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cd2:	e7c5      	b.n	8003c60 <_printf_common+0x58>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	4622      	mov	r2, r4
 8003cd8:	4649      	mov	r1, r9
 8003cda:	4638      	mov	r0, r7
 8003cdc:	47c0      	blx	r8
 8003cde:	3001      	adds	r0, #1
 8003ce0:	d0e6      	beq.n	8003cb0 <_printf_common+0xa8>
 8003ce2:	3601      	adds	r6, #1
 8003ce4:	e7d9      	b.n	8003c9a <_printf_common+0x92>
	...

08003ce8 <_printf_i>:
 8003ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cec:	7e0f      	ldrb	r7, [r1, #24]
 8003cee:	4691      	mov	r9, r2
 8003cf0:	2f78      	cmp	r7, #120	; 0x78
 8003cf2:	4680      	mov	r8, r0
 8003cf4:	460c      	mov	r4, r1
 8003cf6:	469a      	mov	sl, r3
 8003cf8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003cfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003cfe:	d807      	bhi.n	8003d10 <_printf_i+0x28>
 8003d00:	2f62      	cmp	r7, #98	; 0x62
 8003d02:	d80a      	bhi.n	8003d1a <_printf_i+0x32>
 8003d04:	2f00      	cmp	r7, #0
 8003d06:	f000 80d9 	beq.w	8003ebc <_printf_i+0x1d4>
 8003d0a:	2f58      	cmp	r7, #88	; 0x58
 8003d0c:	f000 80a4 	beq.w	8003e58 <_printf_i+0x170>
 8003d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d18:	e03a      	b.n	8003d90 <_printf_i+0xa8>
 8003d1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d1e:	2b15      	cmp	r3, #21
 8003d20:	d8f6      	bhi.n	8003d10 <_printf_i+0x28>
 8003d22:	a101      	add	r1, pc, #4	; (adr r1, 8003d28 <_printf_i+0x40>)
 8003d24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d28:	08003d81 	.word	0x08003d81
 8003d2c:	08003d95 	.word	0x08003d95
 8003d30:	08003d11 	.word	0x08003d11
 8003d34:	08003d11 	.word	0x08003d11
 8003d38:	08003d11 	.word	0x08003d11
 8003d3c:	08003d11 	.word	0x08003d11
 8003d40:	08003d95 	.word	0x08003d95
 8003d44:	08003d11 	.word	0x08003d11
 8003d48:	08003d11 	.word	0x08003d11
 8003d4c:	08003d11 	.word	0x08003d11
 8003d50:	08003d11 	.word	0x08003d11
 8003d54:	08003ea3 	.word	0x08003ea3
 8003d58:	08003dc5 	.word	0x08003dc5
 8003d5c:	08003e85 	.word	0x08003e85
 8003d60:	08003d11 	.word	0x08003d11
 8003d64:	08003d11 	.word	0x08003d11
 8003d68:	08003ec5 	.word	0x08003ec5
 8003d6c:	08003d11 	.word	0x08003d11
 8003d70:	08003dc5 	.word	0x08003dc5
 8003d74:	08003d11 	.word	0x08003d11
 8003d78:	08003d11 	.word	0x08003d11
 8003d7c:	08003e8d 	.word	0x08003e8d
 8003d80:	682b      	ldr	r3, [r5, #0]
 8003d82:	1d1a      	adds	r2, r3, #4
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	602a      	str	r2, [r5, #0]
 8003d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0a4      	b.n	8003ede <_printf_i+0x1f6>
 8003d94:	6820      	ldr	r0, [r4, #0]
 8003d96:	6829      	ldr	r1, [r5, #0]
 8003d98:	0606      	lsls	r6, r0, #24
 8003d9a:	f101 0304 	add.w	r3, r1, #4
 8003d9e:	d50a      	bpl.n	8003db6 <_printf_i+0xce>
 8003da0:	680e      	ldr	r6, [r1, #0]
 8003da2:	602b      	str	r3, [r5, #0]
 8003da4:	2e00      	cmp	r6, #0
 8003da6:	da03      	bge.n	8003db0 <_printf_i+0xc8>
 8003da8:	232d      	movs	r3, #45	; 0x2d
 8003daa:	4276      	negs	r6, r6
 8003dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003db0:	230a      	movs	r3, #10
 8003db2:	485e      	ldr	r0, [pc, #376]	; (8003f2c <_printf_i+0x244>)
 8003db4:	e019      	b.n	8003dea <_printf_i+0x102>
 8003db6:	680e      	ldr	r6, [r1, #0]
 8003db8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003dbc:	602b      	str	r3, [r5, #0]
 8003dbe:	bf18      	it	ne
 8003dc0:	b236      	sxthne	r6, r6
 8003dc2:	e7ef      	b.n	8003da4 <_printf_i+0xbc>
 8003dc4:	682b      	ldr	r3, [r5, #0]
 8003dc6:	6820      	ldr	r0, [r4, #0]
 8003dc8:	1d19      	adds	r1, r3, #4
 8003dca:	6029      	str	r1, [r5, #0]
 8003dcc:	0601      	lsls	r1, r0, #24
 8003dce:	d501      	bpl.n	8003dd4 <_printf_i+0xec>
 8003dd0:	681e      	ldr	r6, [r3, #0]
 8003dd2:	e002      	b.n	8003dda <_printf_i+0xf2>
 8003dd4:	0646      	lsls	r6, r0, #25
 8003dd6:	d5fb      	bpl.n	8003dd0 <_printf_i+0xe8>
 8003dd8:	881e      	ldrh	r6, [r3, #0]
 8003dda:	2f6f      	cmp	r7, #111	; 0x6f
 8003ddc:	bf0c      	ite	eq
 8003dde:	2308      	moveq	r3, #8
 8003de0:	230a      	movne	r3, #10
 8003de2:	4852      	ldr	r0, [pc, #328]	; (8003f2c <_printf_i+0x244>)
 8003de4:	2100      	movs	r1, #0
 8003de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dea:	6865      	ldr	r5, [r4, #4]
 8003dec:	2d00      	cmp	r5, #0
 8003dee:	bfa8      	it	ge
 8003df0:	6821      	ldrge	r1, [r4, #0]
 8003df2:	60a5      	str	r5, [r4, #8]
 8003df4:	bfa4      	itt	ge
 8003df6:	f021 0104 	bicge.w	r1, r1, #4
 8003dfa:	6021      	strge	r1, [r4, #0]
 8003dfc:	b90e      	cbnz	r6, 8003e02 <_printf_i+0x11a>
 8003dfe:	2d00      	cmp	r5, #0
 8003e00:	d04d      	beq.n	8003e9e <_printf_i+0x1b6>
 8003e02:	4615      	mov	r5, r2
 8003e04:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e08:	fb03 6711 	mls	r7, r3, r1, r6
 8003e0c:	5dc7      	ldrb	r7, [r0, r7]
 8003e0e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e12:	4637      	mov	r7, r6
 8003e14:	42bb      	cmp	r3, r7
 8003e16:	460e      	mov	r6, r1
 8003e18:	d9f4      	bls.n	8003e04 <_printf_i+0x11c>
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d10b      	bne.n	8003e36 <_printf_i+0x14e>
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	07de      	lsls	r6, r3, #31
 8003e22:	d508      	bpl.n	8003e36 <_printf_i+0x14e>
 8003e24:	6923      	ldr	r3, [r4, #16]
 8003e26:	6861      	ldr	r1, [r4, #4]
 8003e28:	4299      	cmp	r1, r3
 8003e2a:	bfde      	ittt	le
 8003e2c:	2330      	movle	r3, #48	; 0x30
 8003e2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e36:	1b52      	subs	r2, r2, r5
 8003e38:	6122      	str	r2, [r4, #16]
 8003e3a:	464b      	mov	r3, r9
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	4640      	mov	r0, r8
 8003e40:	f8cd a000 	str.w	sl, [sp]
 8003e44:	aa03      	add	r2, sp, #12
 8003e46:	f7ff fedf 	bl	8003c08 <_printf_common>
 8003e4a:	3001      	adds	r0, #1
 8003e4c:	d14c      	bne.n	8003ee8 <_printf_i+0x200>
 8003e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e52:	b004      	add	sp, #16
 8003e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e58:	4834      	ldr	r0, [pc, #208]	; (8003f2c <_printf_i+0x244>)
 8003e5a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e5e:	6829      	ldr	r1, [r5, #0]
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e66:	6029      	str	r1, [r5, #0]
 8003e68:	061d      	lsls	r5, r3, #24
 8003e6a:	d514      	bpl.n	8003e96 <_printf_i+0x1ae>
 8003e6c:	07df      	lsls	r7, r3, #31
 8003e6e:	bf44      	itt	mi
 8003e70:	f043 0320 	orrmi.w	r3, r3, #32
 8003e74:	6023      	strmi	r3, [r4, #0]
 8003e76:	b91e      	cbnz	r6, 8003e80 <_printf_i+0x198>
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	f023 0320 	bic.w	r3, r3, #32
 8003e7e:	6023      	str	r3, [r4, #0]
 8003e80:	2310      	movs	r3, #16
 8003e82:	e7af      	b.n	8003de4 <_printf_i+0xfc>
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	f043 0320 	orr.w	r3, r3, #32
 8003e8a:	6023      	str	r3, [r4, #0]
 8003e8c:	2378      	movs	r3, #120	; 0x78
 8003e8e:	4828      	ldr	r0, [pc, #160]	; (8003f30 <_printf_i+0x248>)
 8003e90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e94:	e7e3      	b.n	8003e5e <_printf_i+0x176>
 8003e96:	0659      	lsls	r1, r3, #25
 8003e98:	bf48      	it	mi
 8003e9a:	b2b6      	uxthmi	r6, r6
 8003e9c:	e7e6      	b.n	8003e6c <_printf_i+0x184>
 8003e9e:	4615      	mov	r5, r2
 8003ea0:	e7bb      	b.n	8003e1a <_printf_i+0x132>
 8003ea2:	682b      	ldr	r3, [r5, #0]
 8003ea4:	6826      	ldr	r6, [r4, #0]
 8003ea6:	1d18      	adds	r0, r3, #4
 8003ea8:	6961      	ldr	r1, [r4, #20]
 8003eaa:	6028      	str	r0, [r5, #0]
 8003eac:	0635      	lsls	r5, r6, #24
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	d501      	bpl.n	8003eb6 <_printf_i+0x1ce>
 8003eb2:	6019      	str	r1, [r3, #0]
 8003eb4:	e002      	b.n	8003ebc <_printf_i+0x1d4>
 8003eb6:	0670      	lsls	r0, r6, #25
 8003eb8:	d5fb      	bpl.n	8003eb2 <_printf_i+0x1ca>
 8003eba:	8019      	strh	r1, [r3, #0]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	4615      	mov	r5, r2
 8003ec0:	6123      	str	r3, [r4, #16]
 8003ec2:	e7ba      	b.n	8003e3a <_printf_i+0x152>
 8003ec4:	682b      	ldr	r3, [r5, #0]
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	1d1a      	adds	r2, r3, #4
 8003eca:	602a      	str	r2, [r5, #0]
 8003ecc:	681d      	ldr	r5, [r3, #0]
 8003ece:	6862      	ldr	r2, [r4, #4]
 8003ed0:	4628      	mov	r0, r5
 8003ed2:	f000 fb23 	bl	800451c <memchr>
 8003ed6:	b108      	cbz	r0, 8003edc <_printf_i+0x1f4>
 8003ed8:	1b40      	subs	r0, r0, r5
 8003eda:	6060      	str	r0, [r4, #4]
 8003edc:	6863      	ldr	r3, [r4, #4]
 8003ede:	6123      	str	r3, [r4, #16]
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ee6:	e7a8      	b.n	8003e3a <_printf_i+0x152>
 8003ee8:	462a      	mov	r2, r5
 8003eea:	4649      	mov	r1, r9
 8003eec:	4640      	mov	r0, r8
 8003eee:	6923      	ldr	r3, [r4, #16]
 8003ef0:	47d0      	blx	sl
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	d0ab      	beq.n	8003e4e <_printf_i+0x166>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	079b      	lsls	r3, r3, #30
 8003efa:	d413      	bmi.n	8003f24 <_printf_i+0x23c>
 8003efc:	68e0      	ldr	r0, [r4, #12]
 8003efe:	9b03      	ldr	r3, [sp, #12]
 8003f00:	4298      	cmp	r0, r3
 8003f02:	bfb8      	it	lt
 8003f04:	4618      	movlt	r0, r3
 8003f06:	e7a4      	b.n	8003e52 <_printf_i+0x16a>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	4632      	mov	r2, r6
 8003f0c:	4649      	mov	r1, r9
 8003f0e:	4640      	mov	r0, r8
 8003f10:	47d0      	blx	sl
 8003f12:	3001      	adds	r0, #1
 8003f14:	d09b      	beq.n	8003e4e <_printf_i+0x166>
 8003f16:	3501      	adds	r5, #1
 8003f18:	68e3      	ldr	r3, [r4, #12]
 8003f1a:	9903      	ldr	r1, [sp, #12]
 8003f1c:	1a5b      	subs	r3, r3, r1
 8003f1e:	42ab      	cmp	r3, r5
 8003f20:	dcf2      	bgt.n	8003f08 <_printf_i+0x220>
 8003f22:	e7eb      	b.n	8003efc <_printf_i+0x214>
 8003f24:	2500      	movs	r5, #0
 8003f26:	f104 0619 	add.w	r6, r4, #25
 8003f2a:	e7f5      	b.n	8003f18 <_printf_i+0x230>
 8003f2c:	080048d3 	.word	0x080048d3
 8003f30:	080048e4 	.word	0x080048e4

08003f34 <_sbrk_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	2300      	movs	r3, #0
 8003f38:	4d05      	ldr	r5, [pc, #20]	; (8003f50 <_sbrk_r+0x1c>)
 8003f3a:	4604      	mov	r4, r0
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	602b      	str	r3, [r5, #0]
 8003f40:	f7fd fdb0 	bl	8001aa4 <_sbrk>
 8003f44:	1c43      	adds	r3, r0, #1
 8003f46:	d102      	bne.n	8003f4e <_sbrk_r+0x1a>
 8003f48:	682b      	ldr	r3, [r5, #0]
 8003f4a:	b103      	cbz	r3, 8003f4e <_sbrk_r+0x1a>
 8003f4c:	6023      	str	r3, [r4, #0]
 8003f4e:	bd38      	pop	{r3, r4, r5, pc}
 8003f50:	20000290 	.word	0x20000290

08003f54 <__swbuf_r>:
 8003f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f56:	460e      	mov	r6, r1
 8003f58:	4614      	mov	r4, r2
 8003f5a:	4605      	mov	r5, r0
 8003f5c:	b118      	cbz	r0, 8003f66 <__swbuf_r+0x12>
 8003f5e:	6983      	ldr	r3, [r0, #24]
 8003f60:	b90b      	cbnz	r3, 8003f66 <__swbuf_r+0x12>
 8003f62:	f000 f9d5 	bl	8004310 <__sinit>
 8003f66:	4b21      	ldr	r3, [pc, #132]	; (8003fec <__swbuf_r+0x98>)
 8003f68:	429c      	cmp	r4, r3
 8003f6a:	d12b      	bne.n	8003fc4 <__swbuf_r+0x70>
 8003f6c:	686c      	ldr	r4, [r5, #4]
 8003f6e:	69a3      	ldr	r3, [r4, #24]
 8003f70:	60a3      	str	r3, [r4, #8]
 8003f72:	89a3      	ldrh	r3, [r4, #12]
 8003f74:	071a      	lsls	r2, r3, #28
 8003f76:	d52f      	bpl.n	8003fd8 <__swbuf_r+0x84>
 8003f78:	6923      	ldr	r3, [r4, #16]
 8003f7a:	b36b      	cbz	r3, 8003fd8 <__swbuf_r+0x84>
 8003f7c:	6923      	ldr	r3, [r4, #16]
 8003f7e:	6820      	ldr	r0, [r4, #0]
 8003f80:	b2f6      	uxtb	r6, r6
 8003f82:	1ac0      	subs	r0, r0, r3
 8003f84:	6963      	ldr	r3, [r4, #20]
 8003f86:	4637      	mov	r7, r6
 8003f88:	4283      	cmp	r3, r0
 8003f8a:	dc04      	bgt.n	8003f96 <__swbuf_r+0x42>
 8003f8c:	4621      	mov	r1, r4
 8003f8e:	4628      	mov	r0, r5
 8003f90:	f000 f92a 	bl	80041e8 <_fflush_r>
 8003f94:	bb30      	cbnz	r0, 8003fe4 <__swbuf_r+0x90>
 8003f96:	68a3      	ldr	r3, [r4, #8]
 8003f98:	3001      	adds	r0, #1
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	60a3      	str	r3, [r4, #8]
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	6022      	str	r2, [r4, #0]
 8003fa4:	701e      	strb	r6, [r3, #0]
 8003fa6:	6963      	ldr	r3, [r4, #20]
 8003fa8:	4283      	cmp	r3, r0
 8003faa:	d004      	beq.n	8003fb6 <__swbuf_r+0x62>
 8003fac:	89a3      	ldrh	r3, [r4, #12]
 8003fae:	07db      	lsls	r3, r3, #31
 8003fb0:	d506      	bpl.n	8003fc0 <__swbuf_r+0x6c>
 8003fb2:	2e0a      	cmp	r6, #10
 8003fb4:	d104      	bne.n	8003fc0 <__swbuf_r+0x6c>
 8003fb6:	4621      	mov	r1, r4
 8003fb8:	4628      	mov	r0, r5
 8003fba:	f000 f915 	bl	80041e8 <_fflush_r>
 8003fbe:	b988      	cbnz	r0, 8003fe4 <__swbuf_r+0x90>
 8003fc0:	4638      	mov	r0, r7
 8003fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fc4:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <__swbuf_r+0x9c>)
 8003fc6:	429c      	cmp	r4, r3
 8003fc8:	d101      	bne.n	8003fce <__swbuf_r+0x7a>
 8003fca:	68ac      	ldr	r4, [r5, #8]
 8003fcc:	e7cf      	b.n	8003f6e <__swbuf_r+0x1a>
 8003fce:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <__swbuf_r+0xa0>)
 8003fd0:	429c      	cmp	r4, r3
 8003fd2:	bf08      	it	eq
 8003fd4:	68ec      	ldreq	r4, [r5, #12]
 8003fd6:	e7ca      	b.n	8003f6e <__swbuf_r+0x1a>
 8003fd8:	4621      	mov	r1, r4
 8003fda:	4628      	mov	r0, r5
 8003fdc:	f000 f80c 	bl	8003ff8 <__swsetup_r>
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	d0cb      	beq.n	8003f7c <__swbuf_r+0x28>
 8003fe4:	f04f 37ff 	mov.w	r7, #4294967295
 8003fe8:	e7ea      	b.n	8003fc0 <__swbuf_r+0x6c>
 8003fea:	bf00      	nop
 8003fec:	08004918 	.word	0x08004918
 8003ff0:	08004938 	.word	0x08004938
 8003ff4:	080048f8 	.word	0x080048f8

08003ff8 <__swsetup_r>:
 8003ff8:	4b32      	ldr	r3, [pc, #200]	; (80040c4 <__swsetup_r+0xcc>)
 8003ffa:	b570      	push	{r4, r5, r6, lr}
 8003ffc:	681d      	ldr	r5, [r3, #0]
 8003ffe:	4606      	mov	r6, r0
 8004000:	460c      	mov	r4, r1
 8004002:	b125      	cbz	r5, 800400e <__swsetup_r+0x16>
 8004004:	69ab      	ldr	r3, [r5, #24]
 8004006:	b913      	cbnz	r3, 800400e <__swsetup_r+0x16>
 8004008:	4628      	mov	r0, r5
 800400a:	f000 f981 	bl	8004310 <__sinit>
 800400e:	4b2e      	ldr	r3, [pc, #184]	; (80040c8 <__swsetup_r+0xd0>)
 8004010:	429c      	cmp	r4, r3
 8004012:	d10f      	bne.n	8004034 <__swsetup_r+0x3c>
 8004014:	686c      	ldr	r4, [r5, #4]
 8004016:	89a3      	ldrh	r3, [r4, #12]
 8004018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800401c:	0719      	lsls	r1, r3, #28
 800401e:	d42c      	bmi.n	800407a <__swsetup_r+0x82>
 8004020:	06dd      	lsls	r5, r3, #27
 8004022:	d411      	bmi.n	8004048 <__swsetup_r+0x50>
 8004024:	2309      	movs	r3, #9
 8004026:	6033      	str	r3, [r6, #0]
 8004028:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800402c:	f04f 30ff 	mov.w	r0, #4294967295
 8004030:	81a3      	strh	r3, [r4, #12]
 8004032:	e03e      	b.n	80040b2 <__swsetup_r+0xba>
 8004034:	4b25      	ldr	r3, [pc, #148]	; (80040cc <__swsetup_r+0xd4>)
 8004036:	429c      	cmp	r4, r3
 8004038:	d101      	bne.n	800403e <__swsetup_r+0x46>
 800403a:	68ac      	ldr	r4, [r5, #8]
 800403c:	e7eb      	b.n	8004016 <__swsetup_r+0x1e>
 800403e:	4b24      	ldr	r3, [pc, #144]	; (80040d0 <__swsetup_r+0xd8>)
 8004040:	429c      	cmp	r4, r3
 8004042:	bf08      	it	eq
 8004044:	68ec      	ldreq	r4, [r5, #12]
 8004046:	e7e6      	b.n	8004016 <__swsetup_r+0x1e>
 8004048:	0758      	lsls	r0, r3, #29
 800404a:	d512      	bpl.n	8004072 <__swsetup_r+0x7a>
 800404c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800404e:	b141      	cbz	r1, 8004062 <__swsetup_r+0x6a>
 8004050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004054:	4299      	cmp	r1, r3
 8004056:	d002      	beq.n	800405e <__swsetup_r+0x66>
 8004058:	4630      	mov	r0, r6
 800405a:	f7ff fba1 	bl	80037a0 <_free_r>
 800405e:	2300      	movs	r3, #0
 8004060:	6363      	str	r3, [r4, #52]	; 0x34
 8004062:	89a3      	ldrh	r3, [r4, #12]
 8004064:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004068:	81a3      	strh	r3, [r4, #12]
 800406a:	2300      	movs	r3, #0
 800406c:	6063      	str	r3, [r4, #4]
 800406e:	6923      	ldr	r3, [r4, #16]
 8004070:	6023      	str	r3, [r4, #0]
 8004072:	89a3      	ldrh	r3, [r4, #12]
 8004074:	f043 0308 	orr.w	r3, r3, #8
 8004078:	81a3      	strh	r3, [r4, #12]
 800407a:	6923      	ldr	r3, [r4, #16]
 800407c:	b94b      	cbnz	r3, 8004092 <__swsetup_r+0x9a>
 800407e:	89a3      	ldrh	r3, [r4, #12]
 8004080:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004088:	d003      	beq.n	8004092 <__swsetup_r+0x9a>
 800408a:	4621      	mov	r1, r4
 800408c:	4630      	mov	r0, r6
 800408e:	f000 fa05 	bl	800449c <__smakebuf_r>
 8004092:	89a0      	ldrh	r0, [r4, #12]
 8004094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004098:	f010 0301 	ands.w	r3, r0, #1
 800409c:	d00a      	beq.n	80040b4 <__swsetup_r+0xbc>
 800409e:	2300      	movs	r3, #0
 80040a0:	60a3      	str	r3, [r4, #8]
 80040a2:	6963      	ldr	r3, [r4, #20]
 80040a4:	425b      	negs	r3, r3
 80040a6:	61a3      	str	r3, [r4, #24]
 80040a8:	6923      	ldr	r3, [r4, #16]
 80040aa:	b943      	cbnz	r3, 80040be <__swsetup_r+0xc6>
 80040ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80040b0:	d1ba      	bne.n	8004028 <__swsetup_r+0x30>
 80040b2:	bd70      	pop	{r4, r5, r6, pc}
 80040b4:	0781      	lsls	r1, r0, #30
 80040b6:	bf58      	it	pl
 80040b8:	6963      	ldrpl	r3, [r4, #20]
 80040ba:	60a3      	str	r3, [r4, #8]
 80040bc:	e7f4      	b.n	80040a8 <__swsetup_r+0xb0>
 80040be:	2000      	movs	r0, #0
 80040c0:	e7f7      	b.n	80040b2 <__swsetup_r+0xba>
 80040c2:	bf00      	nop
 80040c4:	2000000c 	.word	0x2000000c
 80040c8:	08004918 	.word	0x08004918
 80040cc:	08004938 	.word	0x08004938
 80040d0:	080048f8 	.word	0x080048f8

080040d4 <abort>:
 80040d4:	2006      	movs	r0, #6
 80040d6:	b508      	push	{r3, lr}
 80040d8:	f000 fa62 	bl	80045a0 <raise>
 80040dc:	2001      	movs	r0, #1
 80040de:	f7fd fc6e 	bl	80019be <_exit>
	...

080040e4 <__sflush_r>:
 80040e4:	898a      	ldrh	r2, [r1, #12]
 80040e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e8:	4605      	mov	r5, r0
 80040ea:	0710      	lsls	r0, r2, #28
 80040ec:	460c      	mov	r4, r1
 80040ee:	d457      	bmi.n	80041a0 <__sflush_r+0xbc>
 80040f0:	684b      	ldr	r3, [r1, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	dc04      	bgt.n	8004100 <__sflush_r+0x1c>
 80040f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	dc01      	bgt.n	8004100 <__sflush_r+0x1c>
 80040fc:	2000      	movs	r0, #0
 80040fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004100:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004102:	2e00      	cmp	r6, #0
 8004104:	d0fa      	beq.n	80040fc <__sflush_r+0x18>
 8004106:	2300      	movs	r3, #0
 8004108:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800410c:	682f      	ldr	r7, [r5, #0]
 800410e:	602b      	str	r3, [r5, #0]
 8004110:	d032      	beq.n	8004178 <__sflush_r+0x94>
 8004112:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004114:	89a3      	ldrh	r3, [r4, #12]
 8004116:	075a      	lsls	r2, r3, #29
 8004118:	d505      	bpl.n	8004126 <__sflush_r+0x42>
 800411a:	6863      	ldr	r3, [r4, #4]
 800411c:	1ac0      	subs	r0, r0, r3
 800411e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004120:	b10b      	cbz	r3, 8004126 <__sflush_r+0x42>
 8004122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004124:	1ac0      	subs	r0, r0, r3
 8004126:	2300      	movs	r3, #0
 8004128:	4602      	mov	r2, r0
 800412a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800412c:	4628      	mov	r0, r5
 800412e:	6a21      	ldr	r1, [r4, #32]
 8004130:	47b0      	blx	r6
 8004132:	1c43      	adds	r3, r0, #1
 8004134:	89a3      	ldrh	r3, [r4, #12]
 8004136:	d106      	bne.n	8004146 <__sflush_r+0x62>
 8004138:	6829      	ldr	r1, [r5, #0]
 800413a:	291d      	cmp	r1, #29
 800413c:	d82c      	bhi.n	8004198 <__sflush_r+0xb4>
 800413e:	4a29      	ldr	r2, [pc, #164]	; (80041e4 <__sflush_r+0x100>)
 8004140:	40ca      	lsrs	r2, r1
 8004142:	07d6      	lsls	r6, r2, #31
 8004144:	d528      	bpl.n	8004198 <__sflush_r+0xb4>
 8004146:	2200      	movs	r2, #0
 8004148:	6062      	str	r2, [r4, #4]
 800414a:	6922      	ldr	r2, [r4, #16]
 800414c:	04d9      	lsls	r1, r3, #19
 800414e:	6022      	str	r2, [r4, #0]
 8004150:	d504      	bpl.n	800415c <__sflush_r+0x78>
 8004152:	1c42      	adds	r2, r0, #1
 8004154:	d101      	bne.n	800415a <__sflush_r+0x76>
 8004156:	682b      	ldr	r3, [r5, #0]
 8004158:	b903      	cbnz	r3, 800415c <__sflush_r+0x78>
 800415a:	6560      	str	r0, [r4, #84]	; 0x54
 800415c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800415e:	602f      	str	r7, [r5, #0]
 8004160:	2900      	cmp	r1, #0
 8004162:	d0cb      	beq.n	80040fc <__sflush_r+0x18>
 8004164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004168:	4299      	cmp	r1, r3
 800416a:	d002      	beq.n	8004172 <__sflush_r+0x8e>
 800416c:	4628      	mov	r0, r5
 800416e:	f7ff fb17 	bl	80037a0 <_free_r>
 8004172:	2000      	movs	r0, #0
 8004174:	6360      	str	r0, [r4, #52]	; 0x34
 8004176:	e7c2      	b.n	80040fe <__sflush_r+0x1a>
 8004178:	6a21      	ldr	r1, [r4, #32]
 800417a:	2301      	movs	r3, #1
 800417c:	4628      	mov	r0, r5
 800417e:	47b0      	blx	r6
 8004180:	1c41      	adds	r1, r0, #1
 8004182:	d1c7      	bne.n	8004114 <__sflush_r+0x30>
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0c4      	beq.n	8004114 <__sflush_r+0x30>
 800418a:	2b1d      	cmp	r3, #29
 800418c:	d001      	beq.n	8004192 <__sflush_r+0xae>
 800418e:	2b16      	cmp	r3, #22
 8004190:	d101      	bne.n	8004196 <__sflush_r+0xb2>
 8004192:	602f      	str	r7, [r5, #0]
 8004194:	e7b2      	b.n	80040fc <__sflush_r+0x18>
 8004196:	89a3      	ldrh	r3, [r4, #12]
 8004198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800419c:	81a3      	strh	r3, [r4, #12]
 800419e:	e7ae      	b.n	80040fe <__sflush_r+0x1a>
 80041a0:	690f      	ldr	r7, [r1, #16]
 80041a2:	2f00      	cmp	r7, #0
 80041a4:	d0aa      	beq.n	80040fc <__sflush_r+0x18>
 80041a6:	0793      	lsls	r3, r2, #30
 80041a8:	bf18      	it	ne
 80041aa:	2300      	movne	r3, #0
 80041ac:	680e      	ldr	r6, [r1, #0]
 80041ae:	bf08      	it	eq
 80041b0:	694b      	ldreq	r3, [r1, #20]
 80041b2:	1bf6      	subs	r6, r6, r7
 80041b4:	600f      	str	r7, [r1, #0]
 80041b6:	608b      	str	r3, [r1, #8]
 80041b8:	2e00      	cmp	r6, #0
 80041ba:	dd9f      	ble.n	80040fc <__sflush_r+0x18>
 80041bc:	4633      	mov	r3, r6
 80041be:	463a      	mov	r2, r7
 80041c0:	4628      	mov	r0, r5
 80041c2:	6a21      	ldr	r1, [r4, #32]
 80041c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80041c8:	47e0      	blx	ip
 80041ca:	2800      	cmp	r0, #0
 80041cc:	dc06      	bgt.n	80041dc <__sflush_r+0xf8>
 80041ce:	89a3      	ldrh	r3, [r4, #12]
 80041d0:	f04f 30ff 	mov.w	r0, #4294967295
 80041d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041d8:	81a3      	strh	r3, [r4, #12]
 80041da:	e790      	b.n	80040fe <__sflush_r+0x1a>
 80041dc:	4407      	add	r7, r0
 80041de:	1a36      	subs	r6, r6, r0
 80041e0:	e7ea      	b.n	80041b8 <__sflush_r+0xd4>
 80041e2:	bf00      	nop
 80041e4:	20400001 	.word	0x20400001

080041e8 <_fflush_r>:
 80041e8:	b538      	push	{r3, r4, r5, lr}
 80041ea:	690b      	ldr	r3, [r1, #16]
 80041ec:	4605      	mov	r5, r0
 80041ee:	460c      	mov	r4, r1
 80041f0:	b913      	cbnz	r3, 80041f8 <_fflush_r+0x10>
 80041f2:	2500      	movs	r5, #0
 80041f4:	4628      	mov	r0, r5
 80041f6:	bd38      	pop	{r3, r4, r5, pc}
 80041f8:	b118      	cbz	r0, 8004202 <_fflush_r+0x1a>
 80041fa:	6983      	ldr	r3, [r0, #24]
 80041fc:	b90b      	cbnz	r3, 8004202 <_fflush_r+0x1a>
 80041fe:	f000 f887 	bl	8004310 <__sinit>
 8004202:	4b14      	ldr	r3, [pc, #80]	; (8004254 <_fflush_r+0x6c>)
 8004204:	429c      	cmp	r4, r3
 8004206:	d11b      	bne.n	8004240 <_fflush_r+0x58>
 8004208:	686c      	ldr	r4, [r5, #4]
 800420a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0ef      	beq.n	80041f2 <_fflush_r+0xa>
 8004212:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004214:	07d0      	lsls	r0, r2, #31
 8004216:	d404      	bmi.n	8004222 <_fflush_r+0x3a>
 8004218:	0599      	lsls	r1, r3, #22
 800421a:	d402      	bmi.n	8004222 <_fflush_r+0x3a>
 800421c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800421e:	f000 f915 	bl	800444c <__retarget_lock_acquire_recursive>
 8004222:	4628      	mov	r0, r5
 8004224:	4621      	mov	r1, r4
 8004226:	f7ff ff5d 	bl	80040e4 <__sflush_r>
 800422a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800422c:	4605      	mov	r5, r0
 800422e:	07da      	lsls	r2, r3, #31
 8004230:	d4e0      	bmi.n	80041f4 <_fflush_r+0xc>
 8004232:	89a3      	ldrh	r3, [r4, #12]
 8004234:	059b      	lsls	r3, r3, #22
 8004236:	d4dd      	bmi.n	80041f4 <_fflush_r+0xc>
 8004238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800423a:	f000 f908 	bl	800444e <__retarget_lock_release_recursive>
 800423e:	e7d9      	b.n	80041f4 <_fflush_r+0xc>
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <_fflush_r+0x70>)
 8004242:	429c      	cmp	r4, r3
 8004244:	d101      	bne.n	800424a <_fflush_r+0x62>
 8004246:	68ac      	ldr	r4, [r5, #8]
 8004248:	e7df      	b.n	800420a <_fflush_r+0x22>
 800424a:	4b04      	ldr	r3, [pc, #16]	; (800425c <_fflush_r+0x74>)
 800424c:	429c      	cmp	r4, r3
 800424e:	bf08      	it	eq
 8004250:	68ec      	ldreq	r4, [r5, #12]
 8004252:	e7da      	b.n	800420a <_fflush_r+0x22>
 8004254:	08004918 	.word	0x08004918
 8004258:	08004938 	.word	0x08004938
 800425c:	080048f8 	.word	0x080048f8

08004260 <std>:
 8004260:	2300      	movs	r3, #0
 8004262:	b510      	push	{r4, lr}
 8004264:	4604      	mov	r4, r0
 8004266:	e9c0 3300 	strd	r3, r3, [r0]
 800426a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800426e:	6083      	str	r3, [r0, #8]
 8004270:	8181      	strh	r1, [r0, #12]
 8004272:	6643      	str	r3, [r0, #100]	; 0x64
 8004274:	81c2      	strh	r2, [r0, #14]
 8004276:	6183      	str	r3, [r0, #24]
 8004278:	4619      	mov	r1, r3
 800427a:	2208      	movs	r2, #8
 800427c:	305c      	adds	r0, #92	; 0x5c
 800427e:	f7ff f9f5 	bl	800366c <memset>
 8004282:	4b05      	ldr	r3, [pc, #20]	; (8004298 <std+0x38>)
 8004284:	6224      	str	r4, [r4, #32]
 8004286:	6263      	str	r3, [r4, #36]	; 0x24
 8004288:	4b04      	ldr	r3, [pc, #16]	; (800429c <std+0x3c>)
 800428a:	62a3      	str	r3, [r4, #40]	; 0x28
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <std+0x40>)
 800428e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004290:	4b04      	ldr	r3, [pc, #16]	; (80042a4 <std+0x44>)
 8004292:	6323      	str	r3, [r4, #48]	; 0x30
 8004294:	bd10      	pop	{r4, pc}
 8004296:	bf00      	nop
 8004298:	080045d9 	.word	0x080045d9
 800429c:	080045fb 	.word	0x080045fb
 80042a0:	08004633 	.word	0x08004633
 80042a4:	08004657 	.word	0x08004657

080042a8 <_cleanup_r>:
 80042a8:	4901      	ldr	r1, [pc, #4]	; (80042b0 <_cleanup_r+0x8>)
 80042aa:	f000 b8af 	b.w	800440c <_fwalk_reent>
 80042ae:	bf00      	nop
 80042b0:	080041e9 	.word	0x080041e9

080042b4 <__sfmoreglue>:
 80042b4:	2268      	movs	r2, #104	; 0x68
 80042b6:	b570      	push	{r4, r5, r6, lr}
 80042b8:	1e4d      	subs	r5, r1, #1
 80042ba:	4355      	muls	r5, r2
 80042bc:	460e      	mov	r6, r1
 80042be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80042c2:	f7ff fad5 	bl	8003870 <_malloc_r>
 80042c6:	4604      	mov	r4, r0
 80042c8:	b140      	cbz	r0, 80042dc <__sfmoreglue+0x28>
 80042ca:	2100      	movs	r1, #0
 80042cc:	e9c0 1600 	strd	r1, r6, [r0]
 80042d0:	300c      	adds	r0, #12
 80042d2:	60a0      	str	r0, [r4, #8]
 80042d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80042d8:	f7ff f9c8 	bl	800366c <memset>
 80042dc:	4620      	mov	r0, r4
 80042de:	bd70      	pop	{r4, r5, r6, pc}

080042e0 <__sfp_lock_acquire>:
 80042e0:	4801      	ldr	r0, [pc, #4]	; (80042e8 <__sfp_lock_acquire+0x8>)
 80042e2:	f000 b8b3 	b.w	800444c <__retarget_lock_acquire_recursive>
 80042e6:	bf00      	nop
 80042e8:	20000295 	.word	0x20000295

080042ec <__sfp_lock_release>:
 80042ec:	4801      	ldr	r0, [pc, #4]	; (80042f4 <__sfp_lock_release+0x8>)
 80042ee:	f000 b8ae 	b.w	800444e <__retarget_lock_release_recursive>
 80042f2:	bf00      	nop
 80042f4:	20000295 	.word	0x20000295

080042f8 <__sinit_lock_acquire>:
 80042f8:	4801      	ldr	r0, [pc, #4]	; (8004300 <__sinit_lock_acquire+0x8>)
 80042fa:	f000 b8a7 	b.w	800444c <__retarget_lock_acquire_recursive>
 80042fe:	bf00      	nop
 8004300:	20000296 	.word	0x20000296

08004304 <__sinit_lock_release>:
 8004304:	4801      	ldr	r0, [pc, #4]	; (800430c <__sinit_lock_release+0x8>)
 8004306:	f000 b8a2 	b.w	800444e <__retarget_lock_release_recursive>
 800430a:	bf00      	nop
 800430c:	20000296 	.word	0x20000296

08004310 <__sinit>:
 8004310:	b510      	push	{r4, lr}
 8004312:	4604      	mov	r4, r0
 8004314:	f7ff fff0 	bl	80042f8 <__sinit_lock_acquire>
 8004318:	69a3      	ldr	r3, [r4, #24]
 800431a:	b11b      	cbz	r3, 8004324 <__sinit+0x14>
 800431c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004320:	f7ff bff0 	b.w	8004304 <__sinit_lock_release>
 8004324:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004328:	6523      	str	r3, [r4, #80]	; 0x50
 800432a:	4b13      	ldr	r3, [pc, #76]	; (8004378 <__sinit+0x68>)
 800432c:	4a13      	ldr	r2, [pc, #76]	; (800437c <__sinit+0x6c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	62a2      	str	r2, [r4, #40]	; 0x28
 8004332:	42a3      	cmp	r3, r4
 8004334:	bf08      	it	eq
 8004336:	2301      	moveq	r3, #1
 8004338:	4620      	mov	r0, r4
 800433a:	bf08      	it	eq
 800433c:	61a3      	streq	r3, [r4, #24]
 800433e:	f000 f81f 	bl	8004380 <__sfp>
 8004342:	6060      	str	r0, [r4, #4]
 8004344:	4620      	mov	r0, r4
 8004346:	f000 f81b 	bl	8004380 <__sfp>
 800434a:	60a0      	str	r0, [r4, #8]
 800434c:	4620      	mov	r0, r4
 800434e:	f000 f817 	bl	8004380 <__sfp>
 8004352:	2200      	movs	r2, #0
 8004354:	2104      	movs	r1, #4
 8004356:	60e0      	str	r0, [r4, #12]
 8004358:	6860      	ldr	r0, [r4, #4]
 800435a:	f7ff ff81 	bl	8004260 <std>
 800435e:	2201      	movs	r2, #1
 8004360:	2109      	movs	r1, #9
 8004362:	68a0      	ldr	r0, [r4, #8]
 8004364:	f7ff ff7c 	bl	8004260 <std>
 8004368:	2202      	movs	r2, #2
 800436a:	2112      	movs	r1, #18
 800436c:	68e0      	ldr	r0, [r4, #12]
 800436e:	f7ff ff77 	bl	8004260 <std>
 8004372:	2301      	movs	r3, #1
 8004374:	61a3      	str	r3, [r4, #24]
 8004376:	e7d1      	b.n	800431c <__sinit+0xc>
 8004378:	08004810 	.word	0x08004810
 800437c:	080042a9 	.word	0x080042a9

08004380 <__sfp>:
 8004380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004382:	4607      	mov	r7, r0
 8004384:	f7ff ffac 	bl	80042e0 <__sfp_lock_acquire>
 8004388:	4b1e      	ldr	r3, [pc, #120]	; (8004404 <__sfp+0x84>)
 800438a:	681e      	ldr	r6, [r3, #0]
 800438c:	69b3      	ldr	r3, [r6, #24]
 800438e:	b913      	cbnz	r3, 8004396 <__sfp+0x16>
 8004390:	4630      	mov	r0, r6
 8004392:	f7ff ffbd 	bl	8004310 <__sinit>
 8004396:	3648      	adds	r6, #72	; 0x48
 8004398:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800439c:	3b01      	subs	r3, #1
 800439e:	d503      	bpl.n	80043a8 <__sfp+0x28>
 80043a0:	6833      	ldr	r3, [r6, #0]
 80043a2:	b30b      	cbz	r3, 80043e8 <__sfp+0x68>
 80043a4:	6836      	ldr	r6, [r6, #0]
 80043a6:	e7f7      	b.n	8004398 <__sfp+0x18>
 80043a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80043ac:	b9d5      	cbnz	r5, 80043e4 <__sfp+0x64>
 80043ae:	4b16      	ldr	r3, [pc, #88]	; (8004408 <__sfp+0x88>)
 80043b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80043b4:	60e3      	str	r3, [r4, #12]
 80043b6:	6665      	str	r5, [r4, #100]	; 0x64
 80043b8:	f000 f847 	bl	800444a <__retarget_lock_init_recursive>
 80043bc:	f7ff ff96 	bl	80042ec <__sfp_lock_release>
 80043c0:	2208      	movs	r2, #8
 80043c2:	4629      	mov	r1, r5
 80043c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80043c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80043cc:	6025      	str	r5, [r4, #0]
 80043ce:	61a5      	str	r5, [r4, #24]
 80043d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80043d4:	f7ff f94a 	bl	800366c <memset>
 80043d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80043dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80043e0:	4620      	mov	r0, r4
 80043e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043e4:	3468      	adds	r4, #104	; 0x68
 80043e6:	e7d9      	b.n	800439c <__sfp+0x1c>
 80043e8:	2104      	movs	r1, #4
 80043ea:	4638      	mov	r0, r7
 80043ec:	f7ff ff62 	bl	80042b4 <__sfmoreglue>
 80043f0:	4604      	mov	r4, r0
 80043f2:	6030      	str	r0, [r6, #0]
 80043f4:	2800      	cmp	r0, #0
 80043f6:	d1d5      	bne.n	80043a4 <__sfp+0x24>
 80043f8:	f7ff ff78 	bl	80042ec <__sfp_lock_release>
 80043fc:	230c      	movs	r3, #12
 80043fe:	603b      	str	r3, [r7, #0]
 8004400:	e7ee      	b.n	80043e0 <__sfp+0x60>
 8004402:	bf00      	nop
 8004404:	08004810 	.word	0x08004810
 8004408:	ffff0001 	.word	0xffff0001

0800440c <_fwalk_reent>:
 800440c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004410:	4606      	mov	r6, r0
 8004412:	4688      	mov	r8, r1
 8004414:	2700      	movs	r7, #0
 8004416:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800441a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800441e:	f1b9 0901 	subs.w	r9, r9, #1
 8004422:	d505      	bpl.n	8004430 <_fwalk_reent+0x24>
 8004424:	6824      	ldr	r4, [r4, #0]
 8004426:	2c00      	cmp	r4, #0
 8004428:	d1f7      	bne.n	800441a <_fwalk_reent+0xe>
 800442a:	4638      	mov	r0, r7
 800442c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004430:	89ab      	ldrh	r3, [r5, #12]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d907      	bls.n	8004446 <_fwalk_reent+0x3a>
 8004436:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800443a:	3301      	adds	r3, #1
 800443c:	d003      	beq.n	8004446 <_fwalk_reent+0x3a>
 800443e:	4629      	mov	r1, r5
 8004440:	4630      	mov	r0, r6
 8004442:	47c0      	blx	r8
 8004444:	4307      	orrs	r7, r0
 8004446:	3568      	adds	r5, #104	; 0x68
 8004448:	e7e9      	b.n	800441e <_fwalk_reent+0x12>

0800444a <__retarget_lock_init_recursive>:
 800444a:	4770      	bx	lr

0800444c <__retarget_lock_acquire_recursive>:
 800444c:	4770      	bx	lr

0800444e <__retarget_lock_release_recursive>:
 800444e:	4770      	bx	lr

08004450 <__swhatbuf_r>:
 8004450:	b570      	push	{r4, r5, r6, lr}
 8004452:	460e      	mov	r6, r1
 8004454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004458:	4614      	mov	r4, r2
 800445a:	2900      	cmp	r1, #0
 800445c:	461d      	mov	r5, r3
 800445e:	b096      	sub	sp, #88	; 0x58
 8004460:	da08      	bge.n	8004474 <__swhatbuf_r+0x24>
 8004462:	2200      	movs	r2, #0
 8004464:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004468:	602a      	str	r2, [r5, #0]
 800446a:	061a      	lsls	r2, r3, #24
 800446c:	d410      	bmi.n	8004490 <__swhatbuf_r+0x40>
 800446e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004472:	e00e      	b.n	8004492 <__swhatbuf_r+0x42>
 8004474:	466a      	mov	r2, sp
 8004476:	f000 f915 	bl	80046a4 <_fstat_r>
 800447a:	2800      	cmp	r0, #0
 800447c:	dbf1      	blt.n	8004462 <__swhatbuf_r+0x12>
 800447e:	9a01      	ldr	r2, [sp, #4]
 8004480:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004484:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004488:	425a      	negs	r2, r3
 800448a:	415a      	adcs	r2, r3
 800448c:	602a      	str	r2, [r5, #0]
 800448e:	e7ee      	b.n	800446e <__swhatbuf_r+0x1e>
 8004490:	2340      	movs	r3, #64	; 0x40
 8004492:	2000      	movs	r0, #0
 8004494:	6023      	str	r3, [r4, #0]
 8004496:	b016      	add	sp, #88	; 0x58
 8004498:	bd70      	pop	{r4, r5, r6, pc}
	...

0800449c <__smakebuf_r>:
 800449c:	898b      	ldrh	r3, [r1, #12]
 800449e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80044a0:	079d      	lsls	r5, r3, #30
 80044a2:	4606      	mov	r6, r0
 80044a4:	460c      	mov	r4, r1
 80044a6:	d507      	bpl.n	80044b8 <__smakebuf_r+0x1c>
 80044a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80044ac:	6023      	str	r3, [r4, #0]
 80044ae:	6123      	str	r3, [r4, #16]
 80044b0:	2301      	movs	r3, #1
 80044b2:	6163      	str	r3, [r4, #20]
 80044b4:	b002      	add	sp, #8
 80044b6:	bd70      	pop	{r4, r5, r6, pc}
 80044b8:	466a      	mov	r2, sp
 80044ba:	ab01      	add	r3, sp, #4
 80044bc:	f7ff ffc8 	bl	8004450 <__swhatbuf_r>
 80044c0:	9900      	ldr	r1, [sp, #0]
 80044c2:	4605      	mov	r5, r0
 80044c4:	4630      	mov	r0, r6
 80044c6:	f7ff f9d3 	bl	8003870 <_malloc_r>
 80044ca:	b948      	cbnz	r0, 80044e0 <__smakebuf_r+0x44>
 80044cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044d0:	059a      	lsls	r2, r3, #22
 80044d2:	d4ef      	bmi.n	80044b4 <__smakebuf_r+0x18>
 80044d4:	f023 0303 	bic.w	r3, r3, #3
 80044d8:	f043 0302 	orr.w	r3, r3, #2
 80044dc:	81a3      	strh	r3, [r4, #12]
 80044de:	e7e3      	b.n	80044a8 <__smakebuf_r+0xc>
 80044e0:	4b0d      	ldr	r3, [pc, #52]	; (8004518 <__smakebuf_r+0x7c>)
 80044e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80044e4:	89a3      	ldrh	r3, [r4, #12]
 80044e6:	6020      	str	r0, [r4, #0]
 80044e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ec:	81a3      	strh	r3, [r4, #12]
 80044ee:	9b00      	ldr	r3, [sp, #0]
 80044f0:	6120      	str	r0, [r4, #16]
 80044f2:	6163      	str	r3, [r4, #20]
 80044f4:	9b01      	ldr	r3, [sp, #4]
 80044f6:	b15b      	cbz	r3, 8004510 <__smakebuf_r+0x74>
 80044f8:	4630      	mov	r0, r6
 80044fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044fe:	f000 f8e3 	bl	80046c8 <_isatty_r>
 8004502:	b128      	cbz	r0, 8004510 <__smakebuf_r+0x74>
 8004504:	89a3      	ldrh	r3, [r4, #12]
 8004506:	f023 0303 	bic.w	r3, r3, #3
 800450a:	f043 0301 	orr.w	r3, r3, #1
 800450e:	81a3      	strh	r3, [r4, #12]
 8004510:	89a0      	ldrh	r0, [r4, #12]
 8004512:	4305      	orrs	r5, r0
 8004514:	81a5      	strh	r5, [r4, #12]
 8004516:	e7cd      	b.n	80044b4 <__smakebuf_r+0x18>
 8004518:	080042a9 	.word	0x080042a9

0800451c <memchr>:
 800451c:	4603      	mov	r3, r0
 800451e:	b510      	push	{r4, lr}
 8004520:	b2c9      	uxtb	r1, r1
 8004522:	4402      	add	r2, r0
 8004524:	4293      	cmp	r3, r2
 8004526:	4618      	mov	r0, r3
 8004528:	d101      	bne.n	800452e <memchr+0x12>
 800452a:	2000      	movs	r0, #0
 800452c:	e003      	b.n	8004536 <memchr+0x1a>
 800452e:	7804      	ldrb	r4, [r0, #0]
 8004530:	3301      	adds	r3, #1
 8004532:	428c      	cmp	r4, r1
 8004534:	d1f6      	bne.n	8004524 <memchr+0x8>
 8004536:	bd10      	pop	{r4, pc}

08004538 <__malloc_lock>:
 8004538:	4801      	ldr	r0, [pc, #4]	; (8004540 <__malloc_lock+0x8>)
 800453a:	f7ff bf87 	b.w	800444c <__retarget_lock_acquire_recursive>
 800453e:	bf00      	nop
 8004540:	20000294 	.word	0x20000294

08004544 <__malloc_unlock>:
 8004544:	4801      	ldr	r0, [pc, #4]	; (800454c <__malloc_unlock+0x8>)
 8004546:	f7ff bf82 	b.w	800444e <__retarget_lock_release_recursive>
 800454a:	bf00      	nop
 800454c:	20000294 	.word	0x20000294

08004550 <_raise_r>:
 8004550:	291f      	cmp	r1, #31
 8004552:	b538      	push	{r3, r4, r5, lr}
 8004554:	4604      	mov	r4, r0
 8004556:	460d      	mov	r5, r1
 8004558:	d904      	bls.n	8004564 <_raise_r+0x14>
 800455a:	2316      	movs	r3, #22
 800455c:	6003      	str	r3, [r0, #0]
 800455e:	f04f 30ff 	mov.w	r0, #4294967295
 8004562:	bd38      	pop	{r3, r4, r5, pc}
 8004564:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004566:	b112      	cbz	r2, 800456e <_raise_r+0x1e>
 8004568:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800456c:	b94b      	cbnz	r3, 8004582 <_raise_r+0x32>
 800456e:	4620      	mov	r0, r4
 8004570:	f000 f830 	bl	80045d4 <_getpid_r>
 8004574:	462a      	mov	r2, r5
 8004576:	4601      	mov	r1, r0
 8004578:	4620      	mov	r0, r4
 800457a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800457e:	f000 b817 	b.w	80045b0 <_kill_r>
 8004582:	2b01      	cmp	r3, #1
 8004584:	d00a      	beq.n	800459c <_raise_r+0x4c>
 8004586:	1c59      	adds	r1, r3, #1
 8004588:	d103      	bne.n	8004592 <_raise_r+0x42>
 800458a:	2316      	movs	r3, #22
 800458c:	6003      	str	r3, [r0, #0]
 800458e:	2001      	movs	r0, #1
 8004590:	e7e7      	b.n	8004562 <_raise_r+0x12>
 8004592:	2400      	movs	r4, #0
 8004594:	4628      	mov	r0, r5
 8004596:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800459a:	4798      	blx	r3
 800459c:	2000      	movs	r0, #0
 800459e:	e7e0      	b.n	8004562 <_raise_r+0x12>

080045a0 <raise>:
 80045a0:	4b02      	ldr	r3, [pc, #8]	; (80045ac <raise+0xc>)
 80045a2:	4601      	mov	r1, r0
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	f7ff bfd3 	b.w	8004550 <_raise_r>
 80045aa:	bf00      	nop
 80045ac:	2000000c 	.word	0x2000000c

080045b0 <_kill_r>:
 80045b0:	b538      	push	{r3, r4, r5, lr}
 80045b2:	2300      	movs	r3, #0
 80045b4:	4d06      	ldr	r5, [pc, #24]	; (80045d0 <_kill_r+0x20>)
 80045b6:	4604      	mov	r4, r0
 80045b8:	4608      	mov	r0, r1
 80045ba:	4611      	mov	r1, r2
 80045bc:	602b      	str	r3, [r5, #0]
 80045be:	f7fd f9ee 	bl	800199e <_kill>
 80045c2:	1c43      	adds	r3, r0, #1
 80045c4:	d102      	bne.n	80045cc <_kill_r+0x1c>
 80045c6:	682b      	ldr	r3, [r5, #0]
 80045c8:	b103      	cbz	r3, 80045cc <_kill_r+0x1c>
 80045ca:	6023      	str	r3, [r4, #0]
 80045cc:	bd38      	pop	{r3, r4, r5, pc}
 80045ce:	bf00      	nop
 80045d0:	20000290 	.word	0x20000290

080045d4 <_getpid_r>:
 80045d4:	f7fd b9dc 	b.w	8001990 <_getpid>

080045d8 <__sread>:
 80045d8:	b510      	push	{r4, lr}
 80045da:	460c      	mov	r4, r1
 80045dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045e0:	f000 f894 	bl	800470c <_read_r>
 80045e4:	2800      	cmp	r0, #0
 80045e6:	bfab      	itete	ge
 80045e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80045ea:	89a3      	ldrhlt	r3, [r4, #12]
 80045ec:	181b      	addge	r3, r3, r0
 80045ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80045f2:	bfac      	ite	ge
 80045f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80045f6:	81a3      	strhlt	r3, [r4, #12]
 80045f8:	bd10      	pop	{r4, pc}

080045fa <__swrite>:
 80045fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045fe:	461f      	mov	r7, r3
 8004600:	898b      	ldrh	r3, [r1, #12]
 8004602:	4605      	mov	r5, r0
 8004604:	05db      	lsls	r3, r3, #23
 8004606:	460c      	mov	r4, r1
 8004608:	4616      	mov	r6, r2
 800460a:	d505      	bpl.n	8004618 <__swrite+0x1e>
 800460c:	2302      	movs	r3, #2
 800460e:	2200      	movs	r2, #0
 8004610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004614:	f000 f868 	bl	80046e8 <_lseek_r>
 8004618:	89a3      	ldrh	r3, [r4, #12]
 800461a:	4632      	mov	r2, r6
 800461c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004620:	81a3      	strh	r3, [r4, #12]
 8004622:	4628      	mov	r0, r5
 8004624:	463b      	mov	r3, r7
 8004626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800462a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800462e:	f000 b817 	b.w	8004660 <_write_r>

08004632 <__sseek>:
 8004632:	b510      	push	{r4, lr}
 8004634:	460c      	mov	r4, r1
 8004636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800463a:	f000 f855 	bl	80046e8 <_lseek_r>
 800463e:	1c43      	adds	r3, r0, #1
 8004640:	89a3      	ldrh	r3, [r4, #12]
 8004642:	bf15      	itete	ne
 8004644:	6560      	strne	r0, [r4, #84]	; 0x54
 8004646:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800464a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800464e:	81a3      	strheq	r3, [r4, #12]
 8004650:	bf18      	it	ne
 8004652:	81a3      	strhne	r3, [r4, #12]
 8004654:	bd10      	pop	{r4, pc}

08004656 <__sclose>:
 8004656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800465a:	f000 b813 	b.w	8004684 <_close_r>
	...

08004660 <_write_r>:
 8004660:	b538      	push	{r3, r4, r5, lr}
 8004662:	4604      	mov	r4, r0
 8004664:	4608      	mov	r0, r1
 8004666:	4611      	mov	r1, r2
 8004668:	2200      	movs	r2, #0
 800466a:	4d05      	ldr	r5, [pc, #20]	; (8004680 <_write_r+0x20>)
 800466c:	602a      	str	r2, [r5, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	f7fd f9cc 	bl	8001a0c <_write>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	d102      	bne.n	800467e <_write_r+0x1e>
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	b103      	cbz	r3, 800467e <_write_r+0x1e>
 800467c:	6023      	str	r3, [r4, #0]
 800467e:	bd38      	pop	{r3, r4, r5, pc}
 8004680:	20000290 	.word	0x20000290

08004684 <_close_r>:
 8004684:	b538      	push	{r3, r4, r5, lr}
 8004686:	2300      	movs	r3, #0
 8004688:	4d05      	ldr	r5, [pc, #20]	; (80046a0 <_close_r+0x1c>)
 800468a:	4604      	mov	r4, r0
 800468c:	4608      	mov	r0, r1
 800468e:	602b      	str	r3, [r5, #0]
 8004690:	f7fd f9d8 	bl	8001a44 <_close>
 8004694:	1c43      	adds	r3, r0, #1
 8004696:	d102      	bne.n	800469e <_close_r+0x1a>
 8004698:	682b      	ldr	r3, [r5, #0]
 800469a:	b103      	cbz	r3, 800469e <_close_r+0x1a>
 800469c:	6023      	str	r3, [r4, #0]
 800469e:	bd38      	pop	{r3, r4, r5, pc}
 80046a0:	20000290 	.word	0x20000290

080046a4 <_fstat_r>:
 80046a4:	b538      	push	{r3, r4, r5, lr}
 80046a6:	2300      	movs	r3, #0
 80046a8:	4d06      	ldr	r5, [pc, #24]	; (80046c4 <_fstat_r+0x20>)
 80046aa:	4604      	mov	r4, r0
 80046ac:	4608      	mov	r0, r1
 80046ae:	4611      	mov	r1, r2
 80046b0:	602b      	str	r3, [r5, #0]
 80046b2:	f7fd f9d2 	bl	8001a5a <_fstat>
 80046b6:	1c43      	adds	r3, r0, #1
 80046b8:	d102      	bne.n	80046c0 <_fstat_r+0x1c>
 80046ba:	682b      	ldr	r3, [r5, #0]
 80046bc:	b103      	cbz	r3, 80046c0 <_fstat_r+0x1c>
 80046be:	6023      	str	r3, [r4, #0]
 80046c0:	bd38      	pop	{r3, r4, r5, pc}
 80046c2:	bf00      	nop
 80046c4:	20000290 	.word	0x20000290

080046c8 <_isatty_r>:
 80046c8:	b538      	push	{r3, r4, r5, lr}
 80046ca:	2300      	movs	r3, #0
 80046cc:	4d05      	ldr	r5, [pc, #20]	; (80046e4 <_isatty_r+0x1c>)
 80046ce:	4604      	mov	r4, r0
 80046d0:	4608      	mov	r0, r1
 80046d2:	602b      	str	r3, [r5, #0]
 80046d4:	f7fd f9d0 	bl	8001a78 <_isatty>
 80046d8:	1c43      	adds	r3, r0, #1
 80046da:	d102      	bne.n	80046e2 <_isatty_r+0x1a>
 80046dc:	682b      	ldr	r3, [r5, #0]
 80046de:	b103      	cbz	r3, 80046e2 <_isatty_r+0x1a>
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	bd38      	pop	{r3, r4, r5, pc}
 80046e4:	20000290 	.word	0x20000290

080046e8 <_lseek_r>:
 80046e8:	b538      	push	{r3, r4, r5, lr}
 80046ea:	4604      	mov	r4, r0
 80046ec:	4608      	mov	r0, r1
 80046ee:	4611      	mov	r1, r2
 80046f0:	2200      	movs	r2, #0
 80046f2:	4d05      	ldr	r5, [pc, #20]	; (8004708 <_lseek_r+0x20>)
 80046f4:	602a      	str	r2, [r5, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	f7fd f9c8 	bl	8001a8c <_lseek>
 80046fc:	1c43      	adds	r3, r0, #1
 80046fe:	d102      	bne.n	8004706 <_lseek_r+0x1e>
 8004700:	682b      	ldr	r3, [r5, #0]
 8004702:	b103      	cbz	r3, 8004706 <_lseek_r+0x1e>
 8004704:	6023      	str	r3, [r4, #0]
 8004706:	bd38      	pop	{r3, r4, r5, pc}
 8004708:	20000290 	.word	0x20000290

0800470c <_read_r>:
 800470c:	b538      	push	{r3, r4, r5, lr}
 800470e:	4604      	mov	r4, r0
 8004710:	4608      	mov	r0, r1
 8004712:	4611      	mov	r1, r2
 8004714:	2200      	movs	r2, #0
 8004716:	4d05      	ldr	r5, [pc, #20]	; (800472c <_read_r+0x20>)
 8004718:	602a      	str	r2, [r5, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	f7fd f959 	bl	80019d2 <_read>
 8004720:	1c43      	adds	r3, r0, #1
 8004722:	d102      	bne.n	800472a <_read_r+0x1e>
 8004724:	682b      	ldr	r3, [r5, #0]
 8004726:	b103      	cbz	r3, 800472a <_read_r+0x1e>
 8004728:	6023      	str	r3, [r4, #0]
 800472a:	bd38      	pop	{r3, r4, r5, pc}
 800472c:	20000290 	.word	0x20000290

08004730 <round>:
 8004730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004732:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004736:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 800473a:	2c13      	cmp	r4, #19
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4606      	mov	r6, r0
 8004742:	460d      	mov	r5, r1
 8004744:	dc19      	bgt.n	800477a <round+0x4a>
 8004746:	2c00      	cmp	r4, #0
 8004748:	da09      	bge.n	800475e <round+0x2e>
 800474a:	3401      	adds	r4, #1
 800474c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8004750:	d103      	bne.n	800475a <round+0x2a>
 8004752:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004756:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800475a:	2200      	movs	r2, #0
 800475c:	e02a      	b.n	80047b4 <round+0x84>
 800475e:	4917      	ldr	r1, [pc, #92]	; (80047bc <round+0x8c>)
 8004760:	4121      	asrs	r1, r4
 8004762:	ea03 0001 	and.w	r0, r3, r1
 8004766:	4302      	orrs	r2, r0
 8004768:	d010      	beq.n	800478c <round+0x5c>
 800476a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800476e:	fa42 f404 	asr.w	r4, r2, r4
 8004772:	4423      	add	r3, r4
 8004774:	ea23 0301 	bic.w	r3, r3, r1
 8004778:	e7ef      	b.n	800475a <round+0x2a>
 800477a:	2c33      	cmp	r4, #51	; 0x33
 800477c:	dd09      	ble.n	8004792 <round+0x62>
 800477e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8004782:	d103      	bne.n	800478c <round+0x5c>
 8004784:	f7fb fce8 	bl	8000158 <__adddf3>
 8004788:	4606      	mov	r6, r0
 800478a:	460d      	mov	r5, r1
 800478c:	4630      	mov	r0, r6
 800478e:	4629      	mov	r1, r5
 8004790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004792:	f04f 31ff 	mov.w	r1, #4294967295
 8004796:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800479a:	40f9      	lsrs	r1, r7
 800479c:	4208      	tst	r0, r1
 800479e:	d0f5      	beq.n	800478c <round+0x5c>
 80047a0:	2001      	movs	r0, #1
 80047a2:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80047a6:	fa00 f404 	lsl.w	r4, r0, r4
 80047aa:	1912      	adds	r2, r2, r4
 80047ac:	bf28      	it	cs
 80047ae:	181b      	addcs	r3, r3, r0
 80047b0:	ea22 0201 	bic.w	r2, r2, r1
 80047b4:	4619      	mov	r1, r3
 80047b6:	4610      	mov	r0, r2
 80047b8:	e7e6      	b.n	8004788 <round+0x58>
 80047ba:	bf00      	nop
 80047bc:	000fffff 	.word	0x000fffff

080047c0 <_gettimeofday>:
 80047c0:	2258      	movs	r2, #88	; 0x58
 80047c2:	4b02      	ldr	r3, [pc, #8]	; (80047cc <_gettimeofday+0xc>)
 80047c4:	f04f 30ff 	mov.w	r0, #4294967295
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	4770      	bx	lr
 80047cc:	20000290 	.word	0x20000290

080047d0 <_init>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	bf00      	nop
 80047d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d6:	bc08      	pop	{r3}
 80047d8:	469e      	mov	lr, r3
 80047da:	4770      	bx	lr

080047dc <_fini>:
 80047dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047de:	bf00      	nop
 80047e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047e2:	bc08      	pop	{r3}
 80047e4:	469e      	mov	lr, r3
 80047e6:	4770      	bx	lr
